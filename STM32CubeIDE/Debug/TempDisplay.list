
TempDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004d7b0  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08053268  08053268  00063268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08053270  08053270  00063270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08053274  08053274  00063274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08053278  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0007009c  2**0
                  CONTENTS
  8 .bss          0000044c  2000009c  2000009c  0007009c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004e8  200004e8  0007009c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0007009c  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  000700cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011731  00000000  00000000  0007010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba1  00000000  00000000  00081840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  000843e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  000852c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c11d  00000000  00000000  00085e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013310  00000000  00000000  000b1f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100b58  00000000  00000000  000c522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004210  00000000  00000000  001c5d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007f  00000000  00000000  001c9f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005aa0 	.word	0x08005aa0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	08005aa0 	.word	0x08005aa0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b2      	sub	sp, #200	; 0xc8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 80005a6:	2078      	movs	r0, #120	; 0x78
 80005a8:	f000 fa0e 	bl	80009c8 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80005ac:	4ac8      	ldr	r2, [pc, #800]	; (80008d0 <NT35510_Init+0x334>)
 80005ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b6:	6018      	str	r0, [r3, #0]
 80005b8:	3304      	adds	r3, #4
 80005ba:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80005bc:	4bc5      	ldr	r3, [pc, #788]	; (80008d4 <NT35510_Init+0x338>)
 80005be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80005c2:	4bc5      	ldr	r3, [pc, #788]	; (80008d8 <NT35510_Init+0x33c>)
 80005c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80005c8:	4bc4      	ldr	r3, [pc, #784]	; (80008dc <NT35510_Init+0x340>)
 80005ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 80005ce:	4bc4      	ldr	r3, [pc, #784]	; (80008e0 <NT35510_Init+0x344>)
 80005d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 80005d4:	4bc3      	ldr	r3, [pc, #780]	; (80008e4 <NT35510_Init+0x348>)
 80005d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 80005da:	4bc3      	ldr	r3, [pc, #780]	; (80008e8 <NT35510_Init+0x34c>)
 80005dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 80005e0:	f240 13bf 	movw	r3, #447	; 0x1bf
 80005e4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 80005e8:	4bc0      	ldr	r3, [pc, #768]	; (80008ec <NT35510_Init+0x350>)
 80005ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 80005ee:	4bc0      	ldr	r3, [pc, #768]	; (80008f0 <NT35510_Init+0x354>)
 80005f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 80005f4:	4bbf      	ldr	r3, [pc, #764]	; (80008f4 <NT35510_Init+0x358>)
 80005f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 80005fa:	4bbf      	ldr	r3, [pc, #764]	; (80008f8 <NT35510_Init+0x35c>)
 80005fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000600:	4bbe      	ldr	r3, [pc, #760]	; (80008fc <NT35510_Init+0x360>)
 8000602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8000606:	4bbe      	ldr	r3, [pc, #760]	; (8000900 <NT35510_Init+0x364>)
 8000608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 800060c:	4abd      	ldr	r2, [pc, #756]	; (8000904 <NT35510_Init+0x368>)
 800060e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000612:	6812      	ldr	r2, [r2, #0]
 8000614:	4611      	mov	r1, r2
 8000616:	8019      	strh	r1, [r3, #0]
 8000618:	3302      	adds	r3, #2
 800061a:	0c12      	lsrs	r2, r2, #16
 800061c:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 800061e:	4aba      	ldr	r2, [pc, #744]	; (8000908 <NT35510_Init+0x36c>)
 8000620:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800062e:	4ab7      	ldr	r2, [pc, #732]	; (800090c <NT35510_Init+0x370>)
 8000630:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000634:	6812      	ldr	r2, [r2, #0]
 8000636:	4611      	mov	r1, r2
 8000638:	8019      	strh	r1, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000640:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000644:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000648:	f245 13b5 	movw	r3, #20917	; 0x51b5
 800064c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000650:	4aaf      	ldr	r2, [pc, #700]	; (8000910 <NT35510_Init+0x374>)
 8000652:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	4611      	mov	r1, r2
 800065a:	8019      	strh	r1, [r3, #0]
 800065c:	3302      	adds	r3, #2
 800065e:	0c12      	lsrs	r2, r2, #16
 8000660:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000662:	4aac      	ldr	r2, [pc, #688]	; (8000914 <NT35510_Init+0x378>)
 8000664:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066c:	6018      	str	r0, [r3, #0]
 800066e:	3304      	adds	r3, #4
 8000670:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8000672:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 8000676:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8000678:	4ba7      	ldr	r3, [pc, #668]	; (8000918 <NT35510_Init+0x37c>)
 800067a:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 800067c:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8000680:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8000684:	2336      	movs	r3, #54	; 0x36
 8000686:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 800068a:	4aa4      	ldr	r2, [pc, #656]	; (800091c <NT35510_Init+0x380>)
 800068c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	6018      	str	r0, [r3, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 800069a:	4aa1      	ldr	r2, [pc, #644]	; (8000920 <NT35510_Init+0x384>)
 800069c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a4:	6018      	str	r0, [r3, #0]
 80006a6:	3304      	adds	r3, #4
 80006a8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80006aa:	f246 0336 	movw	r3, #24630	; 0x6036
 80006ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80006b2:	4a9c      	ldr	r2, [pc, #624]	; (8000924 <NT35510_Init+0x388>)
 80006b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006bc:	6018      	str	r0, [r3, #0]
 80006be:	3304      	adds	r3, #4
 80006c0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80006c2:	4a99      	ldr	r2, [pc, #612]	; (8000928 <NT35510_Init+0x38c>)
 80006c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006cc:	6018      	str	r0, [r3, #0]
 80006ce:	3304      	adds	r3, #4
 80006d0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80006d2:	2335      	movs	r3, #53	; 0x35
 80006d4:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80006d6:	2311      	movs	r3, #17
 80006d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80006da:	2329      	movs	r3, #41	; 0x29
 80006dc:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80006de:	f647 7351 	movw	r3, #32593	; 0x7f51
 80006e2:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80006e4:	f642 4353 	movw	r3, #11347	; 0x2c53
 80006e8:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80006ea:	f240 2355 	movw	r3, #597	; 0x255
 80006ee:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 80006f0:	f64f 735e 	movw	r3, #65374	; 0xff5e
 80006f4:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 80006f6:	232c      	movs	r3, #44	; 0x2c
 80006f8:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 80006fa:	f245 533a 	movw	r3, #21818	; 0x553a
 80006fe:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000700:	f247 733a 	movw	r3, #30522	; 0x773a
 8000704:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8000706:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800070a:	4619      	mov	r1, r3
 800070c:	2005      	movs	r0, #5
 800070e:	f000 fc05 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000712:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000716:	4619      	mov	r1, r3
 8000718:	2003      	movs	r0, #3
 800071a:	f000 fbff 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800071e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000722:	4619      	mov	r1, r3
 8000724:	2003      	movs	r0, #3
 8000726:	f000 fbf9 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800072a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800072e:	4619      	mov	r1, r3
 8000730:	2003      	movs	r0, #3
 8000732:	f000 fbf3 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8000736:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800073a:	4619      	mov	r1, r3
 800073c:	2003      	movs	r0, #3
 800073e:	f000 fbed 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000742:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000746:	4619      	mov	r1, r3
 8000748:	2003      	movs	r0, #3
 800074a:	f000 fbe7 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800074e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000752:	4619      	mov	r1, r3
 8000754:	2003      	movs	r0, #3
 8000756:	f000 fbe1 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 800075a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800075e:	4619      	mov	r1, r3
 8000760:	2001      	movs	r0, #1
 8000762:	f000 fbdb 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8000766:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800076a:	4619      	mov	r1, r3
 800076c:	2003      	movs	r0, #3
 800076e:	f000 fbd5 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000776:	4619      	mov	r1, r3
 8000778:	2003      	movs	r0, #3
 800077a:	f000 fbcf 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800077e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000782:	4619      	mov	r1, r3
 8000784:	2003      	movs	r0, #3
 8000786:	f000 fbc9 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 800078a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800078e:	4619      	mov	r1, r3
 8000790:	2003      	movs	r0, #3
 8000792:	f000 fbc3 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8000796:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800079a:	4619      	mov	r1, r3
 800079c:	2003      	movs	r0, #3
 800079e:	f000 fbbd 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80007a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007a6:	4619      	mov	r1, r3
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 fbb7 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80007ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007b2:	4619      	mov	r1, r3
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 fbb1 	bl	8000f1c <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80007ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007be:	4619      	mov	r1, r3
 80007c0:	2005      	movs	r0, #5
 80007c2:	f000 fbab 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80007c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ca:	4619      	mov	r1, r3
 80007cc:	2002      	movs	r0, #2
 80007ce:	f000 fba5 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80007d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80007d6:	4619      	mov	r1, r3
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 fb9f 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80007de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007e2:	4619      	mov	r1, r3
 80007e4:	2001      	movs	r0, #1
 80007e6:	f000 fb99 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80007ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007ee:	4619      	mov	r1, r3
 80007f0:	2002      	movs	r0, #2
 80007f2:	f000 fb93 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80007f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007fa:	4619      	mov	r1, r3
 80007fc:	2004      	movs	r0, #4
 80007fe:	f000 fb8d 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8000802:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000806:	4619      	mov	r1, r3
 8000808:	2003      	movs	r0, #3
 800080a:	f000 fb87 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 800080e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000812:	4619      	mov	r1, r3
 8000814:	2003      	movs	r0, #3
 8000816:	f000 fb81 	bl	8000f1c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 800081a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800081e:	4619      	mov	r1, r3
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fb7b 	bl	8000f1c <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8000826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f000 fb75 	bl	8000f1c <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fb6f 	bl	8000f1c <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 800083e:	20c8      	movs	r0, #200	; 0xc8
 8000840:	f000 f8c2 	bl	80009c8 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d112      	bne.n	8000870 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800084a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800084e:	4619      	mov	r1, r3
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fb63 	bl	8000f1c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8000856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800085a:	4619      	mov	r1, r3
 800085c:	2004      	movs	r0, #4
 800085e:	f000 fb5d 	bl	8000f1c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000866:	4619      	mov	r1, r3
 8000868:	2004      	movs	r0, #4
 800086a:	f000 fb57 	bl	8000f1c <DSI_IO_WriteCmd>
 800086e:	e011      	b.n	8000894 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8000870:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000874:	4619      	mov	r1, r3
 8000876:	2001      	movs	r0, #1
 8000878:	f000 fb50 	bl	8000f1c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800087c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f000 fb4a 	bl	8000f1c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000888:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800088c:	4619      	mov	r1, r3
 800088e:	2004      	movs	r0, #4
 8000890:	f000 fb44 	bl	8000f1c <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8000894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000898:	4619      	mov	r1, r3
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fb3e 	bl	8000f1c <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 80008a0:	2078      	movs	r0, #120	; 0x78
 80008a2:	f000 f891 	bl	80009c8 <NT35510_IO_Delay>

  switch(ColorCoding)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d009      	beq.n	80008c0 <NT35510_Init+0x324>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d13c      	bne.n	800092c <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	2001      	movs	r0, #1
 80008ba:	f000 fb2f 	bl	8000f1c <DSI_IO_WriteCmd>
      break;
 80008be:	e03c      	b.n	800093a <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fb28 	bl	8000f1c <DSI_IO_WriteCmd>
      break;
 80008cc:	e035      	b.n	800093a <NT35510_Init+0x39e>
 80008ce:	bf00      	nop
 80008d0:	08005ab8 	.word	0x08005ab8
 80008d4:	b0030303 	.word	0xb0030303
 80008d8:	b6464646 	.word	0xb6464646
 80008dc:	b1030303 	.word	0xb1030303
 80008e0:	b7363636 	.word	0xb7363636
 80008e4:	b2020000 	.word	0xb2020000
 80008e8:	b8262626 	.word	0xb8262626
 80008ec:	b3090909 	.word	0xb3090909
 80008f0:	b9363636 	.word	0xb9363636
 80008f4:	b5080808 	.word	0xb5080808
 80008f8:	ba262626 	.word	0xba262626
 80008fc:	bc008000 	.word	0xbc008000
 8000900:	bd008000 	.word	0xbd008000
 8000904:	08005ac0 	.word	0x08005ac0
 8000908:	08005ac4 	.word	0x08005ac4
 800090c:	08005acc 	.word	0x08005acc
 8000910:	08005ad0 	.word	0x08005ad0
 8000914:	08005ad4 	.word	0x08005ad4
 8000918:	cc000003 	.word	0xcc000003
 800091c:	08005adc 	.word	0x08005adc
 8000920:	08005ae4 	.word	0x08005ae4
 8000924:	08005aec 	.word	0x08005aec
 8000928:	08005af4 	.word	0x08005af4
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	2001      	movs	r0, #1
 8000934:	f000 faf2 	bl	8000f1c <DSI_IO_WriteCmd>
      break;
 8000938:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	2001      	movs	r0, #1
 8000942:	f000 faeb 	bl	8000f1c <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	4619      	mov	r1, r3
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fae5 	bl	8000f1c <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	2001      	movs	r0, #1
 800095a:	f000 fadf 	bl	8000f1c <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 800095e:	f107 0318 	add.w	r3, r7, #24
 8000962:	4619      	mov	r1, r3
 8000964:	2001      	movs	r0, #1
 8000966:	f000 fad9 	bl	8000f1c <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800096a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096e:	4619      	mov	r1, r3
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fad3 	bl	8000f1c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	2000      	movs	r0, #0
 800097e:	f000 facd 	bl	8000f1c <DSI_IO_WriteCmd>

  return 0;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	37c8      	adds	r7, #200	; 0xc8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d80c      	bhi.n	80009b6 <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <BSP_LED_On+0x34>)
 80009a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <BSP_LED_On+0x38>)
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	f002 fbd5 	bl	8003160 <HAL_GPIO_WritePin>
  }

}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000010 	.word	0x20000010
 80009c4:	20000000 	.word	0x20000000

080009c8 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 fee7 	bl	80017a4 <HAL_Delay>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <BSP_LCD_Reset+0x64>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <BSP_LCD_Reset+0x64>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <BSP_LCD_Reset+0x64>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	607b      	str	r3, [r7, #4]
#if defined(USE_STM32469I_DISCO_REVC)
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
#else
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <BSP_LCD_Reset+0x68>)
 8000a18:	f002 f9f6 	bl	8002e08 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <BSP_LCD_Reset+0x68>)
 8000a22:	f002 fb9d 	bl	8003160 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000a26:	2014      	movs	r0, #20
 8000a28:	f000 febc 	bl	80017a4 <HAL_Delay>

    /* Deactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <BSP_LCD_Reset+0x68>)
 8000a32:	f002 fb95 	bl	8003160 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 8000a36:	2014      	movs	r0, #20
 8000a38:	f000 feb4 	bl	80017a4 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40021c00 	.word	0x40021c00

08000a4c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <BSP_LCD_GetXSize+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000030 	.word	0x20000030

08000a64 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <BSP_LCD_GetYSize+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000034 	.word	0x20000034

08000a7c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000a8c:	f7ff ffde 	bl	8000a4c <BSP_LCD_GetXSize>
 8000a90:	4603      	mov	r3, r0
 8000a92:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000a98:	f7ff ffe4 	bl	8000a64 <BSP_LCD_GetYSize>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000aa8:	23ff      	movs	r3, #255	; 0xff
 8000aaa:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ac2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000acc:	f7ff ffbe 	bl	8000a4c <BSP_LCD_GetXSize>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000ad4:	f7ff ffc6 	bl	8000a64 <BSP_LCD_GetYSize>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8000adc:	88fa      	ldrh	r2, [r7, #6]
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000ae6:	f002 fd52 	bl	800358e <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000aea:	88fa      	ldrh	r2, [r7, #6]
 8000aec:	4911      	ldr	r1, [pc, #68]	; (8000b34 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	440b      	add	r3, r1
 8000af8:	3304      	adds	r3, #4
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	490c      	ldr	r1, [pc, #48]	; (8000b34 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3308      	adds	r3, #8
 8000b10:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000b12:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	4907      	ldr	r1, [pc, #28]	; (8000b34 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	440b      	add	r3, r1
 8000b22:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	3740      	adds	r7, #64	; 0x40
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000f8 	.word	0x200000f8
 8000b34:	200001c0 	.word	0x200001c0
 8000b38:	20000020 	.word	0x20000020

08000b3c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <BSP_LCD_SelectLayer+0x1c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200001bc 	.word	0x200001bc

08000b5c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <BSP_LCD_SetTextColor+0x28>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <BSP_LCD_SetTextColor+0x2c>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	200001bc 	.word	0x200001bc
 8000b88:	200001c0 	.word	0x200001c0

08000b8c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <BSP_LCD_SetBackColor+0x2c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4908      	ldr	r1, [pc, #32]	; (8000bbc <BSP_LCD_SetBackColor+0x30>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200001bc 	.word	0x200001bc
 8000bbc:	200001c0 	.word	0x200001c0

08000bc0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <BSP_LCD_SetFont+0x2c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <BSP_LCD_SetFont+0x30>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3308      	adds	r3, #8
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200001bc 	.word	0x200001bc
 8000bf0:	200001c0 	.word	0x200001c0

08000bf4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <BSP_LCD_GetFont+0x24>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <BSP_LCD_GetFont+0x28>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	3308      	adds	r3, #8
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200001bc 	.word	0x200001bc
 8000c1c:	200001c0 	.word	0x200001c0

08000c20 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <BSP_LCD_DisplayChar+0x80>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	491b      	ldr	r1, [pc, #108]	; (8000ca4 <BSP_LCD_DisplayChar+0x84>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3308      	adds	r3, #8
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <BSP_LCD_DisplayChar+0x80>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4c14      	ldr	r4, [pc, #80]	; (8000ca4 <BSP_LCD_DisplayChar+0x84>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4423      	add	r3, r4
 8000c5e:	3308      	adds	r3, #8
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000c64:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <BSP_LCD_DisplayChar+0x80>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4c0d      	ldr	r4, [pc, #52]	; (8000ca4 <BSP_LCD_DisplayChar+0x84>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4423      	add	r3, r4
 8000c78:	3308      	adds	r3, #8
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	889b      	ldrh	r3, [r3, #4]
 8000c7e:	3307      	adds	r3, #7
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	da00      	bge.n	8000c86 <BSP_LCD_DisplayChar+0x66>
 8000c84:	3307      	adds	r3, #7
 8000c86:	10db      	asrs	r3, r3, #3
 8000c88:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000c8c:	18ca      	adds	r2, r1, r3
 8000c8e:	88b9      	ldrh	r1, [r7, #4]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fa02 	bl	800109c <DrawChar>
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	200001bc 	.word	0x200001bc
 8000ca4:	200001c0 	.word	0x200001c0

08000ca8 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	81fb      	strh	r3, [r7, #14]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	81bb      	strh	r3, [r7, #12]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	83fb      	strh	r3, [r7, #30]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000cd2:	e002      	b.n	8000cda <BSP_LCD_DisplayStringAt+0x32>
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	617a      	str	r2, [r7, #20]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f6      	bne.n	8000cd4 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000ce6:	f7ff feb1 	bl	8000a4c <BSP_LCD_GetXSize>
 8000cea:	4601      	mov	r1, r0
 8000cec:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <BSP_LCD_DisplayStringAt+0x188>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4850      	ldr	r0, [pc, #320]	; (8000e34 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4403      	add	r3, r0
 8000cfc:	3308      	adds	r3, #8
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	889b      	ldrh	r3, [r3, #4]
 8000d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d06:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d01c      	beq.n	8000d48 <BSP_LCD_DisplayStringAt+0xa0>
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	dc33      	bgt.n	8000d7a <BSP_LCD_DisplayStringAt+0xd2>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d002      	beq.n	8000d1c <BSP_LCD_DisplayStringAt+0x74>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d019      	beq.n	8000d4e <BSP_LCD_DisplayStringAt+0xa6>
 8000d1a:	e02e      	b.n	8000d7a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad1      	subs	r1, r2, r3
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <BSP_LCD_DisplayStringAt+0x188>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4843      	ldr	r0, [pc, #268]	; (8000e34 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4403      	add	r3, r0
 8000d32:	3308      	adds	r3, #8
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	889b      	ldrh	r3, [r3, #4]
 8000d38:	fb01 f303 	mul.w	r3, r1, r3
 8000d3c:	085b      	lsrs	r3, r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	4413      	add	r3, r2
 8000d44:	83fb      	strh	r3, [r7, #30]
      break;
 8000d46:	e01b      	b.n	8000d80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	83fb      	strh	r3, [r7, #30]
      break;
 8000d4c:	e018      	b.n	8000d80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <BSP_LCD_DisplayStringAt+0x188>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4836      	ldr	r0, [pc, #216]	; (8000e34 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4403      	add	r3, r0
 8000d66:	3308      	adds	r3, #8
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	889b      	ldrh	r3, [r3, #4]
 8000d6c:	fb11 f303 	smulbb	r3, r1, r3
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	83fb      	strh	r3, [r7, #30]
      break;
 8000d78:	e002      	b.n	8000d80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	83fb      	strh	r3, [r7, #30]
      break;
 8000d7e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000d80:	8bfb      	ldrh	r3, [r7, #30]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <BSP_LCD_DisplayStringAt+0xe6>
 8000d86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da1d      	bge.n	8000dca <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000d92:	e01a      	b.n	8000dca <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	89b9      	ldrh	r1, [r7, #12]
 8000d9a:	8bfb      	ldrh	r3, [r7, #30]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff3f 	bl	8000c20 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <BSP_LCD_DisplayStringAt+0x188>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4923      	ldr	r1, [pc, #140]	; (8000e34 <BSP_LCD_DisplayStringAt+0x18c>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	3308      	adds	r3, #8
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	889a      	ldrh	r2, [r3, #4]
 8000db8:	8bfb      	ldrh	r3, [r7, #30]
 8000dba:	4413      	add	r3, r2
 8000dbc:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
    i++;
 8000dc4:	8bbb      	ldrh	r3, [r7, #28]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2dc      	uxtb	r4, r3
 8000dd8:	f7ff fe38 	bl	8000a4c <BSP_LCD_GetXSize>
 8000ddc:	8bb9      	ldrh	r1, [r7, #28]
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <BSP_LCD_DisplayStringAt+0x188>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4d14      	ldr	r5, [pc, #80]	; (8000e34 <BSP_LCD_DisplayStringAt+0x18c>)
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	3308      	adds	r3, #8
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	889b      	ldrh	r3, [r3, #4]
 8000df4:	fb01 f303 	mul.w	r3, r1, r3
 8000df8:	1ac3      	subs	r3, r0, r3
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <BSP_LCD_DisplayStringAt+0x188>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <BSP_LCD_DisplayStringAt+0x18c>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	4299      	cmp	r1, r3
 8000e14:	bf2c      	ite	cs
 8000e16:	2301      	movcs	r3, #1
 8000e18:	2300      	movcc	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4023      	ands	r3, r4
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1b7      	bne.n	8000d94 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001bc 	.word	0x200001bc
 8000e34:	200001c0 	.word	0x200001c0

08000e38 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000e44:	f7ff fed6 	bl	8000bf4 <BSP_LCD_GetFont>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	88db      	ldrh	r3, [r3, #6]
 8000e4c:	88fa      	ldrh	r2, [r7, #6]
 8000e4e:	fb12 f303 	smulbb	r3, r2, r3
 8000e52:	b299      	uxth	r1, r3
 8000e54:	2303      	movs	r3, #3
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff25 	bl	8000ca8 <BSP_LCD_DisplayStringAt>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af02      	add	r7, sp, #8
 8000e70:	4604      	mov	r4, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <BSP_LCD_FillRect+0xa8>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4920      	ldr	r1, [pc, #128]	; (8000f14 <BSP_LCD_FillRect+0xac>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe5c 	bl	8000b5c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <BSP_LCD_FillRect+0xa8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <BSP_LCD_FillRect+0xb0>)
 8000eaa:	2134      	movs	r1, #52	; 0x34
 8000eac:	fb01 f303 	mul.w	r3, r1, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	335c      	adds	r3, #92	; 0x5c
 8000eb4:	681c      	ldr	r4, [r3, #0]
 8000eb6:	f7ff fdc9 	bl	8000a4c <BSP_LCD_GetXSize>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	fb03 f202 	mul.w	r2, r3, r2
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4423      	add	r3, r4
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <BSP_LCD_FillRect+0xa8>)
 8000ece:	681c      	ldr	r4, [r3, #0]
 8000ed0:	68fd      	ldr	r5, [r7, #12]
 8000ed2:	887e      	ldrh	r6, [r7, #2]
 8000ed4:	f8b7 8000 	ldrh.w	r8, [r7]
 8000ed8:	f7ff fdb8 	bl	8000a4c <BSP_LCD_GetXSize>
 8000edc:	4602      	mov	r2, r0
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	1ad1      	subs	r1, r2, r3
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <BSP_LCD_FillRect+0xa8>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <BSP_LCD_FillRect+0xac>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	9100      	str	r1, [sp, #0]
 8000ef8:	4643      	mov	r3, r8
 8000efa:	4632      	mov	r2, r6
 8000efc:	4629      	mov	r1, r5
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 f984 	bl	800120c <LL_FillBuffer>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001bc 	.word	0x200001bc
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	200000f8 	.word	0x200000f8

08000f1c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d80d      	bhi.n	8000f48 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	2215      	movs	r2, #21
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <DSI_IO_WriteCmd+0x50>)
 8000f42:	f001 fea6 	bl	8002c92 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000f46:	e00d      	b.n	8000f64 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2239      	movs	r2, #57	; 0x39
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <DSI_IO_WriteCmd+0x50>)
 8000f60:	f001 feb9 	bl	8002cd6 <HAL_DSI_LongWrite>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001a0 	.word	0x200001a0

08000f70 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4a2d      	ldr	r2, [pc, #180]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f9c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000fa8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a26      	ldr	r2, [pc, #152]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4a20      	ldr	r2, [pc, #128]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fd0:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a1d      	ldr	r2, [pc, #116]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fdc:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000fe8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8001000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001004:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <BSP_LCD_MspInit+0xdc>)
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <BSP_LCD_MspInit+0xdc>)
 800100c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001010:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2103      	movs	r1, #3
 8001016:	2058      	movs	r0, #88	; 0x58
 8001018:	f000 fcc3 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800101c:	2058      	movs	r0, #88	; 0x58
 800101e:	f000 fcdc 	bl	80019da <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2103      	movs	r1, #3
 8001026:	205a      	movs	r0, #90	; 0x5a
 8001028:	f000 fcbb 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800102c:	205a      	movs	r0, #90	; 0x5a
 800102e:	f000 fcd4 	bl	80019da <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2103      	movs	r1, #3
 8001036:	205c      	movs	r0, #92	; 0x5c
 8001038:	f000 fcb3 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800103c:	205c      	movs	r0, #92	; 0x5c
 800103e:	f000 fccc 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	603a      	str	r2, [r7, #0]
 800105a:	80fb      	strh	r3, [r7, #6]
 800105c:	460b      	mov	r3, r1
 800105e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <BSP_LCD_DrawPixel+0x44>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <BSP_LCD_DrawPixel+0x48>)
 8001066:	2134      	movs	r1, #52	; 0x34
 8001068:	fb01 f303 	mul.w	r3, r1, r3
 800106c:	4413      	add	r3, r2
 800106e:	335c      	adds	r3, #92	; 0x5c
 8001070:	681c      	ldr	r4, [r3, #0]
 8001072:	88bd      	ldrh	r5, [r7, #4]
 8001074:	f7ff fcea 	bl	8000a4c <BSP_LCD_GetXSize>
 8001078:	4603      	mov	r3, r0
 800107a:	fb03 f205 	mul.w	r2, r3, r5
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4423      	add	r3, r4
 8001086:	461a      	mov	r2, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	200001bc 	.word	0x200001bc
 8001098:	200000f8 	.word	0x200000f8

0800109c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	603a      	str	r2, [r7, #0]
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	460b      	mov	r3, r1
 80010aa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80010b4:	4b53      	ldr	r3, [pc, #332]	; (8001204 <DrawChar+0x168>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4953      	ldr	r1, [pc, #332]	; (8001208 <DrawChar+0x16c>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	3308      	adds	r3, #8
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	88db      	ldrh	r3, [r3, #6]
 80010ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80010cc:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <DrawChar+0x168>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	494d      	ldr	r1, [pc, #308]	; (8001208 <DrawChar+0x16c>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3308      	adds	r3, #8
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80010e4:	8a3b      	ldrh	r3, [r7, #16]
 80010e6:	3307      	adds	r3, #7
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da00      	bge.n	80010ee <DrawChar+0x52>
 80010ec:	3307      	adds	r3, #7
 80010ee:	10db      	asrs	r3, r3, #3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	8a3b      	ldrh	r3, [r7, #16]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e076      	b.n	80011f2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001104:	8a3b      	ldrh	r3, [r7, #16]
 8001106:	3307      	adds	r3, #7
 8001108:	2b00      	cmp	r3, #0
 800110a:	da00      	bge.n	800110e <DrawChar+0x72>
 800110c:	3307      	adds	r3, #7
 800110e:	10db      	asrs	r3, r3, #3
 8001110:	461a      	mov	r2, r3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800111e:	8a3b      	ldrh	r3, [r7, #16]
 8001120:	3307      	adds	r3, #7
 8001122:	2b00      	cmp	r3, #0
 8001124:	da00      	bge.n	8001128 <DrawChar+0x8c>
 8001126:	3307      	adds	r3, #7
 8001128:	10db      	asrs	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d002      	beq.n	8001134 <DrawChar+0x98>
 800112e:	2b02      	cmp	r3, #2
 8001130:	d004      	beq.n	800113c <DrawChar+0xa0>
 8001132:	e00c      	b.n	800114e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	617b      	str	r3, [r7, #20]
      break;
 800113a:	e016      	b.n	800116a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	3201      	adds	r2, #1
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	4313      	orrs	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
      break;
 800114c:	e00d      	b.n	800116a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3301      	adds	r3, #1
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	4313      	orrs	r3, r2
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	3202      	adds	r2, #2
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
      break;
 8001168:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	e036      	b.n	80011de <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001170:	8a3a      	ldrh	r2, [r7, #16]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	4413      	add	r3, r2
 800117a:	3b01      	subs	r3, #1
 800117c:	2201      	movs	r2, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	461a      	mov	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d012      	beq.n	80011b2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	b29a      	uxth	r2, r3
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	4413      	add	r3, r2
 8001194:	b298      	uxth	r0, r3
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <DrawChar+0x168>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	491b      	ldr	r1, [pc, #108]	; (8001208 <DrawChar+0x16c>)
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff ff50 	bl	8001050 <BSP_LCD_DrawPixel>
 80011b0:	e012      	b.n	80011d8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	b298      	uxth	r0, r3
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <DrawChar+0x168>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4911      	ldr	r1, [pc, #68]	; (8001208 <DrawChar+0x16c>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	3304      	adds	r3, #4
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff ff3c 	bl	8001050 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	3301      	adds	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	8a3b      	ldrh	r3, [r7, #16]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3c4      	bcc.n	8001170 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	3301      	adds	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d384      	bcc.n	8001104 <DrawChar+0x68>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001bc 	.word	0x200001bc
 8001208:	200001c0 	.word	0x200001c0

0800120c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <LL_FillBuffer+0x68>)
 800121c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001220:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <LL_FillBuffer+0x68>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <LL_FillBuffer+0x68>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <LL_FillBuffer+0x68>)
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <LL_FillBuffer+0x6c>)
 8001232:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <LL_FillBuffer+0x68>)
 8001236:	f000 fda9 	bl	8001d8c <HAL_DMA2D_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d115      	bne.n	800126c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <LL_FillBuffer+0x68>)
 8001244:	f000 ff0a 	bl	800205c <HAL_DMA2D_ConfigLayer>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69f9      	ldr	r1, [r7, #28]
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <LL_FillBuffer+0x68>)
 800125a:	f000 fdea 	bl	8001e32 <HAL_DMA2D_Start>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8001264:	210a      	movs	r1, #10
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <LL_FillBuffer+0x68>)
 8001268:	f000 fe0e 	bl	8001e88 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000b8 	.word	0x200000b8
 8001278:	4002b000 	.word	0x4002b000

0800127c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <BSP_SDRAM_Init+0xac>)
 8001282:	4a2a      	ldr	r2, [pc, #168]	; (800132c <BSP_SDRAM_Init+0xb0>)
 8001284:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 800128e:	2207      	movs	r2, #7
 8001290:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 8001294:	2204      	movs	r2, #4
 8001296:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 800129a:	2207      	movs	r2, #7
 800129c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012be:	2204      	movs	r2, #4
 80012c0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012c4:	2220      	movs	r2, #32
 80012c6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012d0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012d4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 80012f2:	2100      	movs	r1, #0
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012f6:	f000 f87f 	bl	80013f8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80012fa:	490d      	ldr	r1, [pc, #52]	; (8001330 <BSP_SDRAM_Init+0xb4>)
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <BSP_SDRAM_Init+0xac>)
 80012fe:	f003 fa19 	bl	8004734 <HAL_SDRAM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <BSP_SDRAM_Init+0xb8>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e002      	b.n	8001316 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <BSP_SDRAM_Init+0xb8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001316:	f240 5069 	movw	r0, #1385	; 0x569
 800131a:	f000 f80d 	bl	8001338 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <BSP_SDRAM_Init+0xb8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001d8 	.word	0x200001d8
 800132c:	a0000140 	.word	0xa0000140
 8001330:	2000020c 	.word	0x2000020c
 8001334:	20000038 	.word	0x20000038

08001338 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800134c:	2210      	movs	r2, #16
 800134e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001352:	2201      	movs	r2, #1
 8001354:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001360:	4923      	ldr	r1, [pc, #140]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001364:	f003 fa24 	bl	80047b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f000 fa1b 	bl	80017a4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001370:	2202      	movs	r2, #2
 8001372:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001376:	2210      	movs	r2, #16
 8001378:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800137c:	2201      	movs	r2, #1
 800137e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138a:	4919      	ldr	r1, [pc, #100]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800138e:	f003 fa0f 	bl	80047b0 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001394:	2203      	movs	r2, #3
 8001396:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800139a:	2210      	movs	r2, #16
 800139c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013a0:	2208      	movs	r2, #8
 80013a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80013b2:	f003 f9fd 	bl	80047b0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80013b6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80013ba:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013be:	2204      	movs	r2, #4
 80013c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013c4:	2210      	movs	r2, #16
 80013c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013d2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	4905      	ldr	r1, [pc, #20]	; (80013f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80013dc:	f003 f9e8 	bl	80047b0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80013e4:	f003 fa19 	bl	800481a <HAL_SDRAM_ProgramRefreshRate>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000228 	.word	0x20000228
 80013f4:	200001d8 	.word	0x200001d8

080013f8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	; 0x40
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8104 	beq.w	8001612 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	4a82      	ldr	r2, [pc, #520]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6393      	str	r3, [r2, #56]	; 0x38
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 800141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a7b      	ldr	r2, [pc, #492]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001430:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b79      	ldr	r3, [pc, #484]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
 8001446:	4b75      	ldr	r3, [pc, #468]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a74      	ldr	r2, [pc, #464]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	623b      	str	r3, [r7, #32]
 800145c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a6d      	ldr	r2, [pc, #436]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a66      	ldr	r2, [pc, #408]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b60      	ldr	r3, [pc, #384]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a5f      	ldr	r2, [pc, #380]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a51      	ldr	r2, [pc, #324]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a4a      	ldr	r2, [pc, #296]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b48      	ldr	r3, [pc, #288]	; (800161c <BSP_SDRAM_MspInit+0x224>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800150e:	2302      	movs	r3, #2
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001512:	230c      	movs	r3, #12
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8001516:	2301      	movs	r3, #1
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800151a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151e:	4619      	mov	r1, r3
 8001520:	483f      	ldr	r0, [pc, #252]	; (8001620 <BSP_SDRAM_MspInit+0x228>)
 8001522:	f001 fc71 	bl	8002e08 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001526:	f24c 7303 	movw	r3, #50947	; 0xc703
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800152c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001530:	4619      	mov	r1, r3
 8001532:	483c      	ldr	r0, [pc, #240]	; (8001624 <BSP_SDRAM_MspInit+0x22c>)
 8001534:	f001 fc68 	bl	8002e08 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001538:	f64f 7383 	movw	r3, #65411	; 0xff83
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	4619      	mov	r1, r3
 8001544:	4838      	ldr	r0, [pc, #224]	; (8001628 <BSP_SDRAM_MspInit+0x230>)
 8001546:	f001 fc5f 	bl	8002e08 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800154a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	4835      	ldr	r0, [pc, #212]	; (800162c <BSP_SDRAM_MspInit+0x234>)
 8001558:	f001 fc56 	bl	8002e08 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800155c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001566:	4619      	mov	r1, r3
 8001568:	4831      	ldr	r0, [pc, #196]	; (8001630 <BSP_SDRAM_MspInit+0x238>)
 800156a:	f001 fc4d 	bl	8002e08 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800156e:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001578:	4619      	mov	r1, r3
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <BSP_SDRAM_MspInit+0x23c>)
 800157c:	f001 fc44 	bl	8002e08 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001580:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158a:	4619      	mov	r1, r3
 800158c:	482a      	ldr	r0, [pc, #168]	; (8001638 <BSP_SDRAM_MspInit+0x240>)
 800158e:	f001 fc3b 	bl	8002e08 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b4:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015bc:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015da:	2200      	movs	r2, #0
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <BSP_SDRAM_MspInit+0x248>)
 80015e8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 80015f6:	4811      	ldr	r0, [pc, #68]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015f8:	f000 fab8 	bl	8001b6c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <BSP_SDRAM_MspInit+0x244>)
 80015fe:	f000 fa07 	bl	8001a10 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f000 f9cb 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800160c:	2038      	movs	r0, #56	; 0x38
 800160e:	f000 f9e4 	bl	80019da <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001612:	bf00      	nop
 8001614:	3740      	adds	r7, #64	; 0x40
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40021c00 	.word	0x40021c00
 8001638:	40022000 	.word	0x40022000
 800163c:	20000238 	.word	0x20000238
 8001640:	40026410 	.word	0x40026410

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <SystemInit+0x60>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <SystemInit+0x60>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <SystemInit+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <SystemInit+0x64>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <SystemInit+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <SystemInit+0x64>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <SystemInit+0x64>)
 8001670:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <SystemInit+0x64>)
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <SystemInit+0x68>)
 800167e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <SystemInit+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <SystemInit+0x64>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SystemInit+0x60>)
 8001694:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001698:	609a      	str	r2, [r3, #8]
#endif
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00
 80016a8:	40023800 	.word	0x40023800
 80016ac:	24003010 	.word	0x24003010

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f957 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	200f      	movs	r0, #15
 80016e0:	f000 f810 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f000 f806 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f967 	bl	80019f6 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f92f 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000003c 	.word	0x2000003c
 800175c:	20000044 	.word	0x20000044
 8001760:	20000040 	.word	0x20000040

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000044 	.word	0x20000044
 8001788:	20000298 	.word	0x20000298

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000298 	.word	0x20000298

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000044 	.word	0x20000044

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff feb6 	bl	800178c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e099      	b.n	8001b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e00f      	b.n	8001a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fe9d 	bl	800178c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d908      	bls.n	8001a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e078      	b.n	8001b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_DMA_Init+0x158>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d117      	bne.n	8001b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8bd 	bl	8001c94 <DMA_CheckFifoParam>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e016      	b.n	8001b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f874 	bl	8001c28 <DMA_CalcBaseAndBitshift>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	f010803f 	.word	0xf010803f

08001b6c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e050      	b.n	8001c20 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d101      	bne.n	8001b8e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e048      	b.n	8001c20 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2221      	movs	r2, #33	; 0x21
 8001bcc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f82a 	bl	8001c28 <DMA_CalcBaseAndBitshift>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	223f      	movs	r2, #63	; 0x3f
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b10      	subs	r3, #16
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <DMA_CalcBaseAndBitshift+0x64>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <DMA_CalcBaseAndBitshift+0x68>)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d909      	bls.n	8001c6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	1d1a      	adds	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	659a      	str	r2, [r3, #88]	; 0x58
 8001c68:	e007      	b.n	8001c7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	aaaaaaab 	.word	0xaaaaaaab
 8001c90:	0800822c 	.word	0x0800822c

08001c94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d11f      	bne.n	8001cee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d856      	bhi.n	8001d62 <DMA_CheckFifoParam+0xce>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <DMA_CheckFifoParam+0x28>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001ccd 	.word	0x08001ccd
 8001cc0:	08001cdf 	.word	0x08001cdf
 8001cc4:	08001ccd 	.word	0x08001ccd
 8001cc8:	08001d63 	.word	0x08001d63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d046      	beq.n	8001d66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cdc:	e043      	b.n	8001d66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce6:	d140      	bne.n	8001d6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cec:	e03d      	b.n	8001d6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf6:	d121      	bne.n	8001d3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d837      	bhi.n	8001d6e <DMA_CheckFifoParam+0xda>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <DMA_CheckFifoParam+0x70>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d1b 	.word	0x08001d1b
 8001d0c:	08001d15 	.word	0x08001d15
 8001d10:	08001d2d 	.word	0x08001d2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      break;
 8001d18:	e030      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d025      	beq.n	8001d72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d2a:	e022      	b.n	8001d72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d34:	d11f      	bne.n	8001d76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d3a:	e01c      	b.n	8001d76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d903      	bls.n	8001d4a <DMA_CheckFifoParam+0xb6>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d003      	beq.n	8001d50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d48:	e018      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d4e:	e015      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d60:	e00b      	b.n	8001d7a <DMA_CheckFifoParam+0xe6>
      break;
 8001d62:	bf00      	nop
 8001d64:	e00a      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      break;
 8001d66:	bf00      	nop
 8001d68:	e008      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      break;
 8001d6a:	bf00      	nop
 8001d6c:	e006      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      break;
 8001d6e:	bf00      	nop
 8001d70:	e004      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      break;
 8001d72:	bf00      	nop
 8001d74:	e002      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <DMA_CheckFifoParam+0xe8>
      break;
 8001d7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e03b      	b.n	8001e16 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f833 	bl	8001e1e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	f023 0107 	bic.w	r1, r3, #7
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001df6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68d1      	ldr	r1, [r2, #12]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	430b      	orrs	r3, r1
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af02      	add	r7, sp, #8
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA2D_Start+0x1c>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e018      	b.n	8001e80 <HAL_DMA2D_Start+0x4e>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f989 	bl	8002180 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d056      	beq.n	8001f52 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff fc72 	bl	800178c <HAL_GetTick>
 8001ea8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001eaa:	e04b      	b.n	8001f44 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d023      	beq.n	8001f06 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ecc:	f043 0202 	orr.w	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2221      	movs	r2, #33	; 0x21
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0a5      	b.n	8002052 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7ff fc3d 	bl	800178c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <HAL_DMA2D_PollForTransfer+0x9c>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e086      	b.n	8002052 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0ac      	beq.n	8001eac <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d061      	beq.n	8002038 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff fc0a 	bl	800178c <HAL_GetTick>
 8001f78:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001f7a:	e056      	b.n	800202a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d02e      	beq.n	8001fec <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2229      	movs	r2, #41	; 0x29
 8001fd6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d01a      	beq.n	800202a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ff4:	f7ff fbca 	bl	800178c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d302      	bcc.n	800200a <HAL_DMA2D_PollForTransfer+0x182>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2203      	movs	r2, #3
 800201a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e013      	b.n	8002052 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0a1      	beq.n	8001f7c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2212      	movs	r2, #18
 800203e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_DMA2D_ConfigLayer+0x20>
 8002078:	2302      	movs	r3, #2
 800207a:	e079      	b.n	8002170 <HAL_DMA2D_ConfigLayer+0x114>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	3318      	adds	r3, #24
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_DMA2D_ConfigLayer+0x120>)
 80020a8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b0a      	cmp	r3, #10
 80020b0:	d003      	beq.n	80020ba <HAL_DMA2D_ConfigLayer+0x5e>
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	d107      	bne.n	80020ca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e005      	b.n	80020d6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d120      	bne.n	800211e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	ea02 0103 	and.w	r1, r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d003      	beq.n	800210e <HAL_DMA2D_ConfigLayer+0xb2>
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b09      	cmp	r3, #9
 800210c:	d127      	bne.n	800215e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
 800211c:	e01f      	b.n	800215e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	ea02 0103 	and.w	r1, r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	430a      	orrs	r2, r1
 8002134:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b0a      	cmp	r3, #10
 8002146:	d003      	beq.n	8002150 <HAL_DMA2D_ConfigLayer+0xf4>
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d106      	bne.n	800215e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800215c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	ff03000f 	.word	0xff03000f

08002180 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002180:	b480      	push	{r7}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	431a      	orrs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021b8:	d174      	bne.n	80022a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021c0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021c8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80021d0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e053      	b.n	800229a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d106      	bne.n	8002208 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4313      	orrs	r3, r2
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e048      	b.n	800229a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d111      	bne.n	8002234 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	0cdb      	lsrs	r3, r3, #19
 8002214:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	0a9b      	lsrs	r3, r3, #10
 800221a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	08db      	lsrs	r3, r3, #3
 8002220:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	02db      	lsls	r3, r3, #11
 800222a:	4313      	orrs	r3, r2
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	e032      	b.n	800229a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d117      	bne.n	800226c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	0fdb      	lsrs	r3, r3, #31
 8002240:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	0cdb      	lsrs	r3, r3, #19
 8002246:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	0adb      	lsrs	r3, r3, #11
 800224c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	029b      	lsls	r3, r3, #10
 800225c:	431a      	orrs	r2, r3
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	03db      	lsls	r3, r3, #15
 8002262:	4313      	orrs	r3, r2
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	e016      	b.n	800229a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	0f1b      	lsrs	r3, r3, #28
 8002270:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	0d1b      	lsrs	r3, r3, #20
 8002276:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	0b1b      	lsrs	r3, r3, #12
 800227c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	011a      	lsls	r2, r3, #4
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	431a      	orrs	r2, r3
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	031b      	lsls	r3, r3, #12
 8002292:	4313      	orrs	r3, r2
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80022a2:	e003      	b.n	80022ac <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	60da      	str	r2, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	372c      	adds	r7, #44	; 0x2c
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	019a      	lsls	r2, r3, #6
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	431a      	orrs	r2, r3
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f8:	f7ff fa48 	bl	800178c <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80022fe:	e009      	b.n	8002314 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002300:	f7ff fa44 	bl	800178c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800230e:	d901      	bls.n	8002314 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e015      	b.n	8002340 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	019a      	lsls	r2, r3, #6
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	431a      	orrs	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	ea42 0103 	orr.w	r1, r2, r3
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e10b      	b.n	8002574 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7c5b      	ldrb	r3, [r3, #17]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f97e 	bl	8002668 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2203      	movs	r2, #3
 8002370:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002386:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800239a:	f7ff f9f7 	bl	800178c <HAL_GetTick>
 800239e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80023a0:	e009      	b.n	80023b6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80023a2:	f7ff f9f3 	bl	800178c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b0:	d901      	bls.n	80023b6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0de      	b.n	8002574 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ed      	beq.n	80023a2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80023d6:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80023da:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80023f2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80023fa:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff f9b8 	bl	80017a4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002434:	f7ff f9aa 	bl	800178c <HAL_GetTick>
 8002438:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800243a:	e009      	b.n	8002450 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800243c:	f7ff f9a6 	bl	800178c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800244a:	d901      	bls.n	8002450 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e091      	b.n	8002574 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ed      	beq.n	800243c <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0206 	orr.w	r2, r2, #6
 8002470:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0203 	bic.w	r2, r2, #3
 8002484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0203 	bic.w	r2, r2, #3
 80024b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024da:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_DSI_Init+0x1b4>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	e000      	b.n	80024fe <HAL_DSI_Init+0x1b6>
 80024fc:	2301      	movs	r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_DSI_Init+0x234>)
 8002504:	fb03 f202 	mul.w	r2, r3, r2
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	409a      	lsls	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002534:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	430a      	orrs	r2, r1
 8002548:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	003d0900 	.word	0x003d0900

08002580 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e066      	b.n	8002660 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0208 	bic.w	r2, r2, #8
 80025ac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0206 	bic.w	r2, r2, #6
 80025f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002632:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800263e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f818 	bl	800267c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00f      	beq.n	80026c8 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8ad 	bl	8002822 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00f      	beq.n	80026f8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f002 fa68 	bl	8004bc8 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 808c 	beq.w	800281a <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800270a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002722:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f043 0202 	orr.w	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f043 0208 	orr.w	r2, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f043 0210 	orr.w	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f80e 	bl	8002836 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7c1b      	ldrb	r3, [r3, #16]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800285c:	2302      	movs	r3, #2
 800285e:	e0c5      	b.n	80029ec <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0203 	bic.w	r2, r2, #3
 80028ac:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68d9      	ldr	r1, [r3, #12]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0207 	bic.w	r2, r2, #7
 80028ce:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6959      	ldr	r1, [r3, #20]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 020f 	bic.w	r2, r2, #15
 80028fc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020e 	bic.w	r2, r2, #14
 8002920:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	005a      	lsls	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800296e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	431a      	orrs	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0202 	orr.w	r2, r2, #2
 80029e0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7c1b      	ldrb	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_DSI_ConfigCommand+0x16>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e049      	b.n	8002aa2 <HAL_DSI_ConfigCommand+0xaa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_DSI_ConfigCommand+0xb8>)
 8002a20:	400b      	ands	r3, r1
 8002a22:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002a32:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8002a38:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002a3e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002a44:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8002a4a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8002a50:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8002a56:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8002a5c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8002a62:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8002a68:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8002a6e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0202 	bic.w	r2, r2, #2
 8002a86:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	fef080ff 	.word	0xfef080ff

08002ab4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7c1b      	ldrb	r3, [r3, #16]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_DSI_ConfigFlowControl+0x16>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e016      	b.n	8002af8 <HAL_DSI_ConfigFlowControl+0x44>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 021f 	bic.w	r2, r2, #31
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7c1b      	ldrb	r3, [r3, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_DSI_ConfigPhyTimer+0x16>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e058      	b.n	8002bcc <HAL_DSI_ConfigPhyTimer+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	bf38      	it	cc
 8002b2c:	4613      	movcc	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8002b40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	041a      	lsls	r2, r3, #16
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002b6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002ba8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7c1b      	ldrb	r3, [r3, #16]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_DSI_Start+0x14>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e02b      	b.n	8002c44 <HAL_DSI_Start+0x6c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0208 	orr.w	r2, r2, #8
 8002c28:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7c1b      	ldrb	r3, [r3, #16]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_DSI_Refresh+0x14>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e010      	b.n	8002c86 <HAL_DSI_Refresh+0x36>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	741a      	strb	r2, [r3, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0204 	orr.w	r2, r2, #4
 8002c7a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b088      	sub	sp, #32
 8002c96:	af02      	add	r7, sp, #8
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	7c1b      	ldrb	r3, [r3, #16]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_DSI_ShortWrite+0x1a>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e010      	b.n	8002cce <HAL_DSI_ShortWrite+0x3c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fb14 	bl	80022ea <DSI_ShortWrite>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	741a      	strb	r2, [r3, #16]

  return status;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08c      	sub	sp, #48	; 0x30
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	7c1b      	ldrb	r3, [r3, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_DSI_LongWrite+0x1e>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e084      	b.n	8002dfe <HAL_DSI_LongWrite+0x128>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfa:	f7fe fd47 	bl	800178c <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d00:	e00c      	b.n	8002d1c <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d02:	f7fe fd43 	bl	800178c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d10:	d904      	bls.n	8002d1c <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e070      	b.n	8002dfe <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0eb      	beq.n	8002d02 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	bf28      	it	cs
 8002d34:	2303      	movcs	r3, #3
 8002d36:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	e00f      	b.n	8002d5e <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	6a3a      	ldr	r2, [r7, #32]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3eb      	bcc.n	8002d3e <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002d7e:	e028      	b.n	8002dd2 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	bf28      	it	cs
 8002d86:	2304      	movcs	r3, #4
 8002d88:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	e00e      	b.n	8002db2 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	4413      	add	r3, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	3301      	adds	r3, #1
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	6a3a      	ldr	r2, [r7, #32]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d3ec      	bcc.n	8002d94 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1d3      	bne.n	8002d80 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002de0:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	f7ff fa61 	bl	80022b8 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	e177      	b.n	8003114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e24:	2201      	movs	r2, #1
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	f040 8166 	bne.w	800310e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d005      	beq.n	8002e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d130      	bne.n	8002ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 0201 	and.w	r2, r3, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d017      	beq.n	8002ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d123      	bne.n	8002f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	08da      	lsrs	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3208      	adds	r2, #8
 8002f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	08da      	lsrs	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	69b9      	ldr	r1, [r7, #24]
 8002f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0203 	and.w	r2, r3, #3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80c0 	beq.w	800310e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_GPIO_Init+0x324>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_GPIO_Init+0x324>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002faa:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_GPIO_Init+0x328>)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_GPIO_Init+0x32c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d037      	beq.n	8003046 <HAL_GPIO_Init+0x23e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_GPIO_Init+0x23a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x334>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02b      	beq.n	800303e <HAL_GPIO_Init+0x236>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_GPIO_Init+0x338>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d025      	beq.n	800303a <HAL_GPIO_Init+0x232>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a54      	ldr	r2, [pc, #336]	; (8003144 <HAL_GPIO_Init+0x33c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <HAL_GPIO_Init+0x22e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_GPIO_Init+0x340>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x22a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_GPIO_Init+0x344>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x226>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_GPIO_Init+0x348>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x222>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a50      	ldr	r2, [pc, #320]	; (8003154 <HAL_GPIO_Init+0x34c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x21e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4f      	ldr	r2, [pc, #316]	; (8003158 <HAL_GPIO_Init+0x350>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x21a>
 800301e:	2309      	movs	r3, #9
 8003020:	e012      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003022:	230a      	movs	r3, #10
 8003024:	e010      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003026:	2308      	movs	r3, #8
 8003028:	e00e      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302a:	2307      	movs	r3, #7
 800302c:	e00c      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302e:	2306      	movs	r3, #6
 8003030:	e00a      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003032:	2305      	movs	r3, #5
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003036:	2304      	movs	r3, #4
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	; (8003130 <HAL_GPIO_Init+0x328>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_GPIO_Init+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_GPIO_Init+0x354>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_GPIO_Init+0x354>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_GPIO_Init+0x354>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_GPIO_Init+0x354>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_GPIO_Init+0x354>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_GPIO_Init+0x354>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_GPIO_Init+0x354>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f ae84 	bls.w	8002e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40022000 	.word	0x40022000
 8003158:	40022400 	.word	0x40022400
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0bf      	b.n	8003326 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f911 	bl	80033e2 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80031d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_LTDC_Init+0x19c>)
 8003208:	400b      	ands	r3, r1
 800320a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68d9      	ldr	r1, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_LTDC_Init+0x19c>)
 8003236:	400b      	ands	r3, r1
 8003238:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68d9      	ldr	r1, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_LTDC_Init+0x19c>)
 8003264:	400b      	ands	r3, r1
 8003266:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6919      	ldr	r1, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6959      	ldr	r1, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_LTDC_Init+0x19c>)
 8003292:	400b      	ands	r3, r1
 8003294:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6959      	ldr	r1, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0206 	orr.w	r2, r2, #6
 8003302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	f000f800 	.word	0xf000f800

08003334 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e049      	b.n	80033da <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3384      	adds	r3, #132	; 0x84
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	3284      	adds	r2, #132	; 0x84
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0202 	orr.w	r2, r2, #2
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
 8003382:	f7fe fa03 	bl	800178c <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8003388:	e006      	b.n	8003398 <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 800338a:	f7fe f9ff 	bl	800178c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	; 0x64
 8003396:	d807      	bhi.n	80033a8 <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f1      	beq.n	800338a <HAL_LTDC_DeInit+0x56>
 80033a6:	e000      	b.n	80033aa <HAL_LTDC_DeInit+0x76>
    {
      break;
 80033a8:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f81b 	bl	80033f6 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d023      	beq.n	8003474 <HAL_LTDC_IRQHandler+0x6a>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01e      	beq.n	8003474 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2204      	movs	r2, #4
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2204      	movs	r2, #4
 8003462:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f86f 	bl	8003552 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d023      	beq.n	80034c6 <HAL_LTDC_IRQHandler+0xbc>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01e      	beq.n	80034c6 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0202 	bic.w	r2, r2, #2
 8003496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2202      	movs	r2, #2
 800349e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034a6:	f043 0202 	orr.w	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2204      	movs	r2, #4
 80034b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f846 	bl	8003552 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01b      	beq.n	8003508 <HAL_LTDC_IRQHandler+0xfe>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f82f 	bl	8003566 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01b      	beq.n	800354a <HAL_LTDC_IRQHandler+0x140>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0208 	bic.w	r2, r2, #8
 800352a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f818 	bl	800357a <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800358e:	b5b0      	push	{r4, r5, r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_LTDC_ConfigLayer+0x1a>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e02c      	b.n	8003602 <HAL_LTDC_ConfigLayer+0x74>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2134      	movs	r1, #52	; 0x34
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4614      	mov	r4, r2
 80035cc:	461d      	mov	r5, r3
 80035ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f811 	bl	800360a <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bdb0      	pop	{r4, r5, r7, pc}

0800360a <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800360a:	b480      	push	{r7}
 800360c:	b089      	sub	sp, #36	; 0x24
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003626:	4413      	add	r3, r2
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	01db      	lsls	r3, r3, #7
 8003636:	4413      	add	r3, r2
 8003638:	3384      	adds	r3, #132	; 0x84
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	4611      	mov	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	01d2      	lsls	r2, r2, #7
 8003646:	440a      	add	r2, r1
 8003648:	3284      	adds	r2, #132	; 0x84
 800364a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800364e:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003660:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003662:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	01db      	lsls	r3, r3, #7
 800366e:	440b      	add	r3, r1
 8003670:	3384      	adds	r3, #132	; 0x84
 8003672:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003678:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003688:	4413      	add	r3, r2
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	01db      	lsls	r3, r3, #7
 8003698:	4413      	add	r3, r2
 800369a:	3384      	adds	r3, #132	; 0x84
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	4611      	mov	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	01d2      	lsls	r2, r2, #7
 80036a8:	440a      	add	r2, r1
 80036aa:	3284      	adds	r2, #132	; 0x84
 80036ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036b0:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c0:	4413      	add	r3, r2
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	440b      	add	r3, r1
 80036d0:	3384      	adds	r3, #132	; 0x84
 80036d2:	4619      	mov	r1, r3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	01db      	lsls	r3, r3, #7
 80036e4:	4413      	add	r3, r2
 80036e6:	3384      	adds	r3, #132	; 0x84
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	4611      	mov	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	01d2      	lsls	r2, r2, #7
 80036f4:	440a      	add	r2, r1
 80036f6:	3284      	adds	r2, #132	; 0x84
 80036f8:	f023 0307 	bic.w	r3, r3, #7
 80036fc:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	01db      	lsls	r3, r3, #7
 8003708:	4413      	add	r3, r2
 800370a:	3384      	adds	r3, #132	; 0x84
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	01db      	lsls	r3, r3, #7
 800373a:	4413      	add	r3, r2
 800373c:	3384      	adds	r3, #132	; 0x84
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	01db      	lsls	r3, r3, #7
 800374a:	4413      	add	r3, r2
 800374c:	3384      	adds	r3, #132	; 0x84
 800374e:	461a      	mov	r2, r3
 8003750:	2300      	movs	r3, #0
 8003752:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800375a:	461a      	mov	r2, r3
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	431a      	orrs	r2, r3
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	431a      	orrs	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	01db      	lsls	r3, r3, #7
 800376e:	440b      	add	r3, r1
 8003770:	3384      	adds	r3, #132	; 0x84
 8003772:	4619      	mov	r1, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	01db      	lsls	r3, r3, #7
 8003784:	4413      	add	r3, r2
 8003786:	3384      	adds	r3, #132	; 0x84
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	4611      	mov	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	01d2      	lsls	r2, r2, #7
 8003794:	440a      	add	r2, r1
 8003796:	3284      	adds	r2, #132	; 0x84
 8003798:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800379c:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	01db      	lsls	r3, r3, #7
 80037a8:	4413      	add	r3, r2
 80037aa:	3384      	adds	r3, #132	; 0x84
 80037ac:	461a      	mov	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	01db      	lsls	r3, r3, #7
 80037be:	4413      	add	r3, r2
 80037c0:	3384      	adds	r3, #132	; 0x84
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4611      	mov	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	01d2      	lsls	r2, r2, #7
 80037ce:	440a      	add	r2, r1
 80037d0:	3284      	adds	r2, #132	; 0x84
 80037d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	68f9      	ldr	r1, [r7, #12]
 80037e6:	6809      	ldr	r1, [r1, #0]
 80037e8:	4608      	mov	r0, r1
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	01c9      	lsls	r1, r1, #7
 80037ee:	4401      	add	r1, r0
 80037f0:	3184      	adds	r1, #132	; 0x84
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	01db      	lsls	r3, r3, #7
 8003800:	4413      	add	r3, r2
 8003802:	3384      	adds	r3, #132	; 0x84
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	01db      	lsls	r3, r3, #7
 8003810:	4413      	add	r3, r2
 8003812:	3384      	adds	r3, #132	; 0x84
 8003814:	461a      	mov	r2, r3
 8003816:	2300      	movs	r3, #0
 8003818:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	01db      	lsls	r3, r3, #7
 8003824:	4413      	add	r3, r2
 8003826:	3384      	adds	r3, #132	; 0x84
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003838:	2304      	movs	r3, #4
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e01b      	b.n	8003876 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003846:	2303      	movs	r3, #3
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e014      	b.n	8003876 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d00b      	beq.n	800386c <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003858:	2b02      	cmp	r3, #2
 800385a:	d007      	beq.n	800386c <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003860:	2b03      	cmp	r3, #3
 8003862:	d003      	beq.n	800386c <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003868:	2b07      	cmp	r3, #7
 800386a:	d102      	bne.n	8003872 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800386c:	2302      	movs	r3, #2
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e001      	b.n	8003876 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	01db      	lsls	r3, r3, #7
 8003880:	4413      	add	r3, r2
 8003882:	3384      	adds	r3, #132	; 0x84
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	4611      	mov	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	01d2      	lsls	r2, r2, #7
 8003890:	440a      	add	r2, r1
 8003892:	3284      	adds	r2, #132	; 0x84
 8003894:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003898:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	fb02 f303 	mul.w	r3, r2, r3
 80038a4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1acb      	subs	r3, r1, r3
 80038b0:	69f9      	ldr	r1, [r7, #28]
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80038b8:	68f9      	ldr	r1, [r7, #12]
 80038ba:	6809      	ldr	r1, [r1, #0]
 80038bc:	4608      	mov	r0, r1
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	01c9      	lsls	r1, r1, #7
 80038c2:	4401      	add	r1, r0
 80038c4:	3184      	adds	r1, #132	; 0x84
 80038c6:	4313      	orrs	r3, r2
 80038c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	01db      	lsls	r3, r3, #7
 80038d4:	4413      	add	r3, r2
 80038d6:	3384      	adds	r3, #132	; 0x84
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	4611      	mov	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	01d2      	lsls	r2, r2, #7
 80038e4:	440a      	add	r2, r1
 80038e6:	3284      	adds	r2, #132	; 0x84
 80038e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038ec:	f023 0307 	bic.w	r3, r3, #7
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	01db      	lsls	r3, r3, #7
 80038fc:	4413      	add	r3, r2
 80038fe:	3384      	adds	r3, #132	; 0x84
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	01db      	lsls	r3, r3, #7
 8003912:	4413      	add	r3, r2
 8003914:	3384      	adds	r3, #132	; 0x84
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	4611      	mov	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	01d2      	lsls	r2, r2, #7
 8003922:	440a      	add	r2, r1
 8003924:	3284      	adds	r2, #132	; 0x84
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	3724      	adds	r7, #36	; 0x24
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_PWREx_EnableOverDrive+0x94>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003964:	f7fd ff12 	bl	800178c <HAL_GetTick>
 8003968:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800396a:	e009      	b.n	8003980 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800396c:	f7fd ff0e 	bl	800178c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800397a:	d901      	bls.n	8003980 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e01f      	b.n	80039c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d1ee      	bne.n	800396c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003994:	f7fd fefa 	bl	800178c <HAL_GetTick>
 8003998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800399a:	e009      	b.n	80039b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800399c:	f7fd fef6 	bl	800178c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039aa:	d901      	bls.n	80039b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e007      	b.n	80039c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039bc:	d1ee      	bne.n	800399c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	420e0040 	.word	0x420e0040
 80039d0:	40007000 	.word	0x40007000
 80039d4:	420e0044 	.word	0x420e0044

080039d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0cc      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b68      	ldr	r3, [pc, #416]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d90c      	bls.n	8003a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b65      	ldr	r3, [pc, #404]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b63      	ldr	r3, [pc, #396]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0b8      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a2c:	4b59      	ldr	r3, [pc, #356]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a58      	ldr	r2, [pc, #352]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a52      	ldr	r2, [pc, #328]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b50      	ldr	r3, [pc, #320]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	494d      	ldr	r1, [pc, #308]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d044      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d119      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e07f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e067      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4934      	ldr	r1, [pc, #208]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fe60 	bl	800178c <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fd fe5c 	bl	800178c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e04f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d20c      	bcs.n	8003b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e032      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4916      	ldr	r1, [pc, #88]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	490e      	ldr	r1, [pc, #56]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5e:	f000 f821 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490a      	ldr	r1, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fdc0 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00
 8003b94:	40023800 	.word	0x40023800
 8003b98:	0800821c 	.word	0x0800821c
 8003b9c:	2000003c 	.word	0x2000003c
 8003ba0:	20000040 	.word	0x20000040

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b094      	sub	sp, #80	; 0x50
 8003baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bbc:	4b79      	ldr	r3, [pc, #484]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d00d      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	f200 80e1 	bhi.w	8003d90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd6:	e0db      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bdc:	e0db      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_GetSysClockFreq+0x208>)
 8003be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be2:	e0d8      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be4:	4b6f      	ldr	r3, [pc, #444]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bee:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d063      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfa:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	2200      	movs	r2, #0
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
 8003c12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	0159      	lsls	r1, r3, #5
 8003c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c28:	0150      	lsls	r0, r2, #5
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4621      	mov	r1, r4
 8003c30:	1a51      	subs	r1, r2, r1
 8003c32:	6139      	str	r1, [r7, #16]
 8003c34:	4629      	mov	r1, r5
 8003c36:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	018b      	lsls	r3, r1, #6
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c52:	4651      	mov	r1, sl
 8003c54:	018a      	lsls	r2, r1, #6
 8003c56:	4651      	mov	r1, sl
 8003c58:	ebb2 0801 	subs.w	r8, r2, r1
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c76:	4690      	mov	r8, r2
 8003c78:	4699      	mov	r9, r3
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	eb18 0303 	adds.w	r3, r8, r3
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	462b      	mov	r3, r5
 8003c84:	eb49 0303 	adc.w	r3, r9, r3
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c96:	4629      	mov	r1, r5
 8003c98:	024b      	lsls	r3, r1, #9
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	024a      	lsls	r2, r1, #9
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003caa:	2200      	movs	r2, #0
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb4:	f7fc faf4 	bl	80002a0 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc0:	e058      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc2:	4b38      	ldr	r3, [pc, #224]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	4611      	mov	r1, r2
 8003cce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cdc:	4642      	mov	r2, r8
 8003cde:	464b      	mov	r3, r9
 8003ce0:	f04f 0000 	mov.w	r0, #0
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	0159      	lsls	r1, r3, #5
 8003cea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cee:	0150      	lsls	r0, r2, #5
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d14:	ebb2 040a 	subs.w	r4, r2, sl
 8003d18:	eb63 050b 	sbc.w	r5, r3, fp
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	00eb      	lsls	r3, r5, #3
 8003d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2a:	00e2      	lsls	r2, r4, #3
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	461d      	mov	r5, r3
 8003d30:	4643      	mov	r3, r8
 8003d32:	18e3      	adds	r3, r4, r3
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	464b      	mov	r3, r9
 8003d38:	eb45 0303 	adc.w	r3, r5, r3
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	028b      	lsls	r3, r1, #10
 8003d4e:	4621      	mov	r1, r4
 8003d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d54:	4621      	mov	r1, r4
 8003d56:	028a      	lsls	r2, r1, #10
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	61fa      	str	r2, [r7, #28]
 8003d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d68:	f7fc fa9a 	bl	80002a0 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d8e:	e002      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3750      	adds	r7, #80	; 0x50
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	007a1200 	.word	0x007a1200

08003db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dd8:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dde:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	4963      	ldr	r1, [pc, #396]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003dfa:	4b5e      	ldr	r3, [pc, #376]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	495a      	ldr	r1, [pc, #360]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d075      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e34:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3a:	f7fd fca7 	bl	800178c <HAL_GetTick>
 8003e3e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e42:	f7fd fca3 	bl	800178c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1dc      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e54:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	019a      	lsls	r2, r3, #6
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	071b      	lsls	r3, r3, #28
 8003e78:	493e      	ldr	r1, [pc, #248]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e8c:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	0f1b      	lsrs	r3, r3, #28
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	019a      	lsls	r2, r3, #6
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	071b      	lsls	r3, r3, #28
 8003eac:	4931      	ldr	r1, [pc, #196]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eba:	f023 021f 	bic.w	r2, r3, #31
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	492b      	ldr	r1, [pc, #172]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	019a      	lsls	r2, r3, #6
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	071b      	lsls	r3, r3, #28
 8003eec:	4921      	ldr	r1, [pc, #132]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003efa:	f7fd fc47 	bl	800178c <HAL_GetTick>
 8003efe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f02:	f7fd fc43 	bl	800178c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e17c      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d112      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80ce 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4e:	f040 80c8 	bne.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fc18 	bl	800178c <HAL_GetTick>
 8003f5c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f5e:	e00f      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f60:	f7fd fc14 	bl	800178c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d908      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e14d      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	42470068 	.word	0x42470068
 8003f7c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f80:	4ba5      	ldr	r3, [pc, #660]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8c:	d0e8      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02e      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f9a:	4b9f      	ldr	r3, [pc, #636]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fac:	4b9a      	ldr	r3, [pc, #616]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	0f1b      	lsrs	r3, r3, #28
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	019a      	lsls	r2, r3, #6
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	4990      	ldr	r1, [pc, #576]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fde:	4b8e      	ldr	r3, [pc, #568]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	3b01      	subs	r3, #1
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	4989      	ldr	r1, [pc, #548]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02c      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004004:	4b84      	ldr	r3, [pc, #528]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	3301      	adds	r3, #1
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004016:	4b80      	ldr	r3, [pc, #512]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	0e1b      	lsrs	r3, r3, #24
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	019a      	lsls	r2, r3, #6
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	071b      	lsls	r3, r3, #28
 8004040:	4975      	ldr	r1, [pc, #468]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004048:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800404a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	4970      	ldr	r1, [pc, #448]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d024      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004072:	d11f      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004074:	4b68      	ldr	r3, [pc, #416]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	0e1b      	lsrs	r3, r3, #24
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004082:	4b65      	ldr	r3, [pc, #404]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	0f1b      	lsrs	r3, r3, #28
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	019a      	lsls	r2, r3, #6
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	071b      	lsls	r3, r3, #28
 80040ac:	495a      	ldr	r1, [pc, #360]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040ba:	f7fd fb67 	bl	800178c <HAL_GetTick>
 80040be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040c2:	f7fd fb63 	bl	800178c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e09c      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e0:	d1ef      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8083 	beq.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	4b48      	ldr	r3, [pc, #288]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4a47      	ldr	r2, [pc, #284]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004100:	4b45      	ldr	r3, [pc, #276]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800410c:	4b44      	ldr	r3, [pc, #272]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a43      	ldr	r2, [pc, #268]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004118:	f7fd fb38 	bl	800178c <HAL_GetTick>
 800411c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd fb34 	bl	800178c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e06d      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d02f      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d028      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800415c:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800416c:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004172:	4a29      	ldr	r2, [pc, #164]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d114      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd fb02 	bl	800178c <HAL_GetTick>
 8004188:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	e00a      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fd fafe 	bl	800178c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e035      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ee      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	4911      	ldr	r1, [pc, #68]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	e005      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041e2:	6093      	str	r3, [r2, #8]
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	4909      	ldr	r1, [pc, #36]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800420a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	42470070 	.word	0x42470070
 8004220:	40007000 	.word	0x40007000
 8004224:	42470e40 	.word	0x42470e40
 8004228:	424711e0 	.word	0x424711e0

0800422c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e273      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d075      	beq.n	8004336 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800424a:	4b88      	ldr	r3, [pc, #544]	; (800446c <HAL_RCC_OscConfig+0x240>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b04      	cmp	r3, #4
 8004254:	d00c      	beq.n	8004270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004256:	4b85      	ldr	r3, [pc, #532]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800425e:	2b08      	cmp	r3, #8
 8004260:	d112      	bne.n	8004288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004262:	4b82      	ldr	r3, [pc, #520]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426e:	d10b      	bne.n	8004288 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	4b7e      	ldr	r3, [pc, #504]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d05b      	beq.n	8004334 <HAL_RCC_OscConfig+0x108>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d157      	bne.n	8004334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e24e      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d106      	bne.n	80042a0 <HAL_RCC_OscConfig+0x74>
 8004292:	4b76      	ldr	r3, [pc, #472]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a75      	ldr	r2, [pc, #468]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e01d      	b.n	80042dc <HAL_RCC_OscConfig+0xb0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b70      	ldr	r3, [pc, #448]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6f      	ldr	r2, [pc, #444]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b6d      	ldr	r3, [pc, #436]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6c      	ldr	r2, [pc, #432]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0xb0>
 80042c4:	4b69      	ldr	r3, [pc, #420]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a68      	ldr	r2, [pc, #416]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a65      	ldr	r2, [pc, #404]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80042d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fa52 	bl	800178c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fd fa4e 	bl	800178c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e213      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b5b      	ldr	r3, [pc, #364]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0xc0>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd fa3e 	bl	800178c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004314:	f7fd fa3a 	bl	800178c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e1ff      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	4b51      	ldr	r3, [pc, #324]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0xe8>
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004342:	4b4a      	ldr	r3, [pc, #296]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004356:	2b08      	cmp	r3, #8
 8004358:	d11c      	bne.n	8004394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435a:	4b44      	ldr	r3, [pc, #272]	; (800446c <HAL_RCC_OscConfig+0x240>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d116      	bne.n	8004394 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	4b41      	ldr	r3, [pc, #260]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_RCC_OscConfig+0x152>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d001      	beq.n	800437e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e1d3      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4937      	ldr	r1, [pc, #220]	; (800446c <HAL_RCC_OscConfig+0x240>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	e03a      	b.n	800440a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800439c:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_RCC_OscConfig+0x244>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd f9f3 	bl	800178c <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fd f9ef 	bl	800178c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e1b4      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4925      	ldr	r1, [pc, #148]	; (800446c <HAL_RCC_OscConfig+0x240>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
 80043dc:	e015      	b.n	800440a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCC_OscConfig+0x244>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd f9d2 	bl	800178c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ec:	f7fd f9ce 	bl	800178c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e193      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d036      	beq.n	8004484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <HAL_RCC_OscConfig+0x248>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7fd f9b2 	bl	800178c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442c:	f7fd f9ae 	bl	800178c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e173      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_OscConfig+0x240>)
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x200>
 800444a:	e01b      	b.n	8004484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <HAL_RCC_OscConfig+0x248>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004452:	f7fd f99b 	bl	800178c <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	e00e      	b.n	8004478 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445a:	f7fd f997 	bl	800178c <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d907      	bls.n	8004478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e15c      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
 800446c:	40023800 	.word	0x40023800
 8004470:	42470000 	.word	0x42470000
 8004474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004478:	4b8a      	ldr	r3, [pc, #552]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800447a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1ea      	bne.n	800445a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8097 	beq.w	80045c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004496:	4b83      	ldr	r3, [pc, #524]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80044ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b79      	ldr	r3, [pc, #484]	; (80046a8 <HAL_RCC_OscConfig+0x47c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ce:	4b76      	ldr	r3, [pc, #472]	; (80046a8 <HAL_RCC_OscConfig+0x47c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a75      	ldr	r2, [pc, #468]	; (80046a8 <HAL_RCC_OscConfig+0x47c>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044da:	f7fd f957 	bl	800178c <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fd f953 	bl	800178c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e118      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <HAL_RCC_OscConfig+0x47c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x2ea>
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4a65      	ldr	r2, [pc, #404]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
 8004514:	e01c      	b.n	8004550 <HAL_RCC_OscConfig+0x324>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b05      	cmp	r3, #5
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x30c>
 800451e:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a60      	ldr	r2, [pc, #384]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
 800452a:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	e00b      	b.n	8004550 <HAL_RCC_OscConfig+0x324>
 8004538:	4b5a      	ldr	r3, [pc, #360]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	4a59      	ldr	r2, [pc, #356]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
 8004544:	4b57      	ldr	r3, [pc, #348]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a56      	ldr	r2, [pc, #344]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800454a:	f023 0304 	bic.w	r3, r3, #4
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd f918 	bl	800178c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fd f914 	bl	800178c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0d7      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ee      	beq.n	8004560 <HAL_RCC_OscConfig+0x334>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fd f902 	bl	800178c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fd f8fe 	bl	800178c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e0c1      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a2:	4b40      	ldr	r3, [pc, #256]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1ee      	bne.n	800458c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b4:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	4a3a      	ldr	r2, [pc, #232]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80045ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80ad 	beq.w	8004724 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ca:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d060      	beq.n	8004698 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d145      	bne.n	800466a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <HAL_RCC_OscConfig+0x480>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd f8d2 	bl	800178c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd f8ce 	bl	800178c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e093      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	3b01      	subs	r3, #1
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	491b      	ldr	r1, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x480>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd f8a3 	bl	800178c <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd f89f 	bl	800178c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e064      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x41e>
 8004668:	e05c      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_RCC_OscConfig+0x480>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd f88c 	bl	800178c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd f888 	bl	800178c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e04d      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_OscConfig+0x478>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x44c>
 8004696:	e045      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e040      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d030      	beq.n	8004720 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d129      	bne.n	8004720 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d122      	bne.n	8004720 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d119      	bne.n	8004720 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d10f      	bne.n	8004720 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800

08004734 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e025      	b.n	8004794 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f81d 	bl	800479c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3304      	adds	r3, #4
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f000 f878 	bl	800486a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	461a      	mov	r2, r3
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	f000 f8cd 	bl	8004924 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047c2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d101      	bne.n	80047ce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
 80047cc:	e021      	b.n	8004812 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d002      	beq.n	80047da <HAL_SDRAM_SendCommand+0x2a>
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	d118      	bne.n	800480c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f903 	bl	80049f6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d104      	bne.n	8004802 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2205      	movs	r2, #5
 80047fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004800:	e006      	b.n	8004810 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800480a:	e001      	b.n	8004810 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d101      	bne.n	8004834 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	e016      	b.n	8004862 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10f      	bne.n	8004860 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f90e 	bl	8004a70 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	e000      	b.n	8004862 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d123      	bne.n	80048c4 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	6851      	ldr	r1, [r2, #4]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	6892      	ldr	r2, [r2, #8]
 8004890:	4311      	orrs	r1, r2
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	68d2      	ldr	r2, [r2, #12]
 8004896:	4311      	orrs	r1, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	6912      	ldr	r2, [r2, #16]
 800489c:	4311      	orrs	r1, r2
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	6952      	ldr	r2, [r2, #20]
 80048a2:	4311      	orrs	r1, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	6992      	ldr	r2, [r2, #24]
 80048a8:	4311      	orrs	r1, r2
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	69d2      	ldr	r2, [r2, #28]
 80048ae:	4311      	orrs	r1, r2
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	6a12      	ldr	r2, [r2, #32]
 80048b4:	4311      	orrs	r1, r2
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ba:	430a      	orrs	r2, r1
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e028      	b.n	8004916 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	69d9      	ldr	r1, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4319      	orrs	r1, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	430b      	orrs	r3, r1
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	6851      	ldr	r1, [r2, #4]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	6892      	ldr	r2, [r2, #8]
 80048f6:	4311      	orrs	r1, r2
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	68d2      	ldr	r2, [r2, #12]
 80048fc:	4311      	orrs	r1, r2
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	6912      	ldr	r2, [r2, #16]
 8004902:	4311      	orrs	r1, r2
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	6952      	ldr	r2, [r2, #20]
 8004908:	4311      	orrs	r1, r2
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	6992      	ldr	r2, [r2, #24]
 800490e:	430a      	orrs	r2, r1
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d128      	bne.n	8004988 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	1e59      	subs	r1, r3, #1
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	3b01      	subs	r3, #1
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	4319      	orrs	r1, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	3b01      	subs	r3, #1
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	4319      	orrs	r1, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	3b01      	subs	r3, #1
 800495e:	031b      	lsls	r3, r3, #12
 8004960:	4319      	orrs	r1, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	3b01      	subs	r3, #1
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	4319      	orrs	r1, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	3b01      	subs	r3, #1
 8004972:	051b      	lsls	r3, r3, #20
 8004974:	4319      	orrs	r1, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	3b01      	subs	r3, #1
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	430b      	orrs	r3, r1
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	e02f      	b.n	80049e8 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	68d2      	ldr	r2, [r2, #12]
 8004998:	3a01      	subs	r2, #1
 800499a:	0311      	lsls	r1, r2, #12
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	6952      	ldr	r2, [r2, #20]
 80049a0:	3a01      	subs	r2, #1
 80049a2:	0512      	lsls	r2, r2, #20
 80049a4:	430a      	orrs	r2, r1
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1e59      	subs	r1, r3, #1
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4319      	orrs	r1, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	4319      	orrs	r1, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4319      	orrs	r1, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	3b01      	subs	r3, #1
 80049de:	061b      	lsls	r3, r3, #24
 80049e0:	430b      	orrs	r3, r1
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	0d9b      	lsrs	r3, r3, #22
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	6811      	ldr	r1, [r2, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	6852      	ldr	r2, [r2, #4]
 8004a16:	4311      	orrs	r1, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0152      	lsls	r2, r2, #5
 8004a20:	4311      	orrs	r1, r2
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	0252      	lsls	r2, r2, #9
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8004a30:	f7fc feac 	bl	800178c <HAL_GetTick>
 8004a34:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004a36:	e010      	b.n	8004a5a <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d00c      	beq.n	8004a5a <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <FMC_SDRAM_SendCommand+0x60>
 8004a46:	f7fc fea1 	bl	800178c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d201      	bcs.n	8004a5a <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e006      	b.n	8004a68 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d0e8      	beq.n	8004a38 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a82:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	0052      	lsls	r2, r2, #1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004aa4:	480d      	ldr	r0, [pc, #52]	; (8004adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004aa6:	490e      	ldr	r1, [pc, #56]	; (8004ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aac:	e002      	b.n	8004ab4 <LoopCopyDataInit>

08004aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ab2:	3304      	adds	r3, #4

08004ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ab8:	d3f9      	bcc.n	8004aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aba:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004abc:	4c0b      	ldr	r4, [pc, #44]	; (8004aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8004abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ac0:	e001      	b.n	8004ac6 <LoopFillZerobss>

08004ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ac4:	3204      	adds	r2, #4

08004ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ac8:	d3fb      	bcc.n	8004ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004aca:	f7fc fdbb 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ace:	f000 fb71 	bl	80051b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ad2:	f000 f81d 	bl	8004b10 <main>
  bx  lr    
 8004ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ad8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ae0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004ae4:	08053278 	.word	0x08053278
  ldr r2, =_sbss
 8004ae8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004aec:	200004e8 	.word	0x200004e8

08004af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004af0:	e7fe      	b.n	8004af0 <ADC_IRQHandler>

08004af2 <OnError_Handler>:
 * @param condition Condition to check.
 *
 * This function turns on an LED and enters an infinite loop if the condition is true.
 */
static void OnError_Handler(uint32_t condition)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  if(condition)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <OnError_Handler+0x16>
  {
    BSP_LED_On(LED3);
 8004b00:	2002      	movs	r0, #2
 8004b02:	f7fb ff43 	bl	800098c <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 8004b06:	e7fe      	b.n	8004b06 <OnError_Handler+0x14>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <main>:
 *
 * Initializes the hardware, sets up the LCD, and enters an infinite loop.
 * @return int Program exit status.
 */
int main(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af02      	add	r7, sp, #8
  uint8_t  lcd_status = LCD_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	71fb      	strb	r3, [r7, #7]

  HAL_Init();
 8004b1a:	f7fc fdc9 	bl	80016b0 <HAL_Init>
  SystemClock_Config();
 8004b1e:	f000 f867 	bl	8004bf0 <SystemClock_Config>
  BSP_SDRAM_Init();
 8004b22:	f7fc fbab 	bl	800127c <BSP_SDRAM_Init>

  lcd_status = LCD_Init();
 8004b26:	f000 f8d3 	bl	8004cd0 <LCD_Init>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(lcd_status != LCD_OK);
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ffd9 	bl	8004af2 <OnError_Handler>

  BSP_LCD_LayerDefaultInit(0, LAYER0_ADDRESS);
 8004b40:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7fb ff99 	bl	8000a7c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fb fff6 	bl	8000b3c <BSP_LCD_SelectLayer>
  LCD_BriefDisplay();
 8004b50:	f000 f9e8 	bl	8004f24 <LCD_BriefDisplay>
  
  CopyBuffer((uint32_t *)image_320x240_argb8888, (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8004b54:	23f0      	movs	r3, #240	; 0xf0
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	23a0      	movs	r3, #160	; 0xa0
 8004b60:	22f0      	movs	r2, #240	; 0xf0
 8004b62:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004b66:	4807      	ldr	r0, [pc, #28]	; (8004b84 <main+0x74>)
 8004b68:	f000 fa2a 	bl	8004fc0 <CopyBuffer>
  pending_buffer = 0;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <main+0x78>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_Refresh(&hdsi_eval);
 8004b72:	4806      	ldr	r0, [pc, #24]	; (8004b8c <main+0x7c>)
 8004b74:	f7fe f86c 	bl	8002c50 <HAL_DSI_Refresh>

  while (1)
  {
      int ReadTemperature(void);
      HAL_Delay(2000);
 8004b78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004b7c:	f7fc fe12 	bl	80017a4 <HAL_Delay>
  {
 8004b80:	e7fa      	b.n	8004b78 <main+0x68>
 8004b82:	bf00      	nop
 8004b84:	08008234 	.word	0x08008234
 8004b88:	20000048 	.word	0x20000048
 8004b8c:	200001a0 	.word	0x200001a0

08004b90 <ReadTemperature>:
/**
 * @brief Simulates reading a temperature.
 *
 * @return int Simulated temperature value.
 */
int ReadTemperature(void){
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
    float minTemperature = 20.0;
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <ReadTemperature+0x2c>)
 8004b98:	60fb      	str	r3, [r7, #12]
    float maxTemperature = 30.0;
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <ReadTemperature+0x30>)
 8004b9c:	60bb      	str	r3, [r7, #8]
    float temperature = 28.0;
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <ReadTemperature+0x34>)
 8004ba0:	607b      	str	r3, [r7, #4]
    return temperature;
 8004ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004baa:	ee17 3a90 	vmov	r3, s15
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	41a00000 	.word	0x41a00000
 8004bc0:	41f00000 	.word	0x41f00000
 8004bc4:	41e00000 	.word	0x41e00000

08004bc8 <HAL_DSI_EndOfRefreshCallback>:
 * @param hdsi Pointer to DSI handler.
 *
 * Resets the pending_buffer variable when the DSI refresh ends.
 */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if(pending_buffer >= 0)
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_DSI_EndOfRefreshCallback+0x24>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db03      	blt.n	8004be0 <HAL_DSI_EndOfRefreshCallback+0x18>
  {
    pending_buffer = -1;
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_DSI_EndOfRefreshCallback+0x24>)
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295
 8004bde:	601a      	str	r2, [r3, #0]
  }
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000048 	.word	0x20000048

08004bf0 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b096      	sub	sp, #88	; 0x58
 8004bf4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <SystemClock_Config+0xd8>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <SystemClock_Config+0xd8>)
 8004c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <SystemClock_Config+0xd8>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <SystemClock_Config+0xdc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <SystemClock_Config+0xdc>)
 8004c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <SystemClock_Config+0xdc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c3c:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004c48:	2308      	movs	r3, #8
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8004c4c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c52:	2302      	movs	r3, #2
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c56:	2307      	movs	r3, #7
 8004c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8004c5a:	2306      	movs	r3, #6
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fae2 	bl	800422c <HAL_RCC_OscConfig>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8004c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8004c76:	e7fe      	b.n	8004c76 <SystemClock_Config+0x86>
  }

  ret = HAL_PWREx_EnableOverDrive();
 8004c78:	f7fe fe5e 	bl	8003938 <HAL_PWREx_EnableOverDrive>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8004c82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d000      	beq.n	8004c8c <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8004c8a:	e7fe      	b.n	8004c8a <SystemClock_Config+0x9a>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c90:	2302      	movs	r3, #2
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c94:	2300      	movs	r3, #0
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca2:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ca8:	2105      	movs	r1, #5
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fe94 	bl	80039d8 <HAL_RCC_ClockConfig>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8004cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d000      	beq.n	8004cc0 <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 8004cbe:	e7fe      	b.n	8004cbe <SystemClock_Config+0xce>
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3758      	adds	r7, #88	; 0x58
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40007000 	.word	0x40007000

08004cd0 <LCD_Init>:

static uint8_t LCD_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  static DSI_CmdCfgTypeDef CmdCfg;
  static DSI_LPCmdTypeDef LPCmd;
  static DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  BSP_LCD_Reset();
 8004cd4:	f7fb fe84 	bl	80009e0 <BSP_LCD_Reset>

  BSP_LCD_MspInit();
 8004cd8:	f7fc f94a 	bl	8000f70 <BSP_LCD_MspInit>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004cdc:	4b66      	ldr	r3, [pc, #408]	; (8004e78 <LCD_Init+0x1a8>)
 8004cde:	2208      	movs	r2, #8
 8004ce0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 8004ce2:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <LCD_Init+0x1a8>)
 8004ce4:	f240 12a1 	movw	r2, #417	; 0x1a1
 8004ce8:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004cea:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <LCD_Init+0x1a8>)
 8004cec:	2205      	movs	r2, #5
 8004cee:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004cf0:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <LCD_Init+0x1a8>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004cf6:	4860      	ldr	r0, [pc, #384]	; (8004e78 <LCD_Init+0x1a8>)
 8004cf8:	f7ff f85a 	bl	8003db0 <HAL_RCCEx_PeriphCLKConfig>

  hdsi_eval.Instance = DSI;
 8004cfc:	4b5f      	ldr	r3, [pc, #380]	; (8004e7c <LCD_Init+0x1ac>)
 8004cfe:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <LCD_Init+0x1b0>)
 8004d00:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_eval));
 8004d02:	485e      	ldr	r0, [pc, #376]	; (8004e7c <LCD_Init+0x1ac>)
 8004d04:	f7fd fc3c 	bl	8002580 <HAL_DSI_DeInit>

#if defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
#else
  dsiPllInit.PLLNDIV  = 125;
 8004d08:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <LCD_Init+0x1b4>)
 8004d0a:	227d      	movs	r2, #125	; 0x7d
 8004d0c:	601a      	str	r2, [r3, #0]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8004d0e:	4b5d      	ldr	r3, [pc, #372]	; (8004e84 <LCD_Init+0x1b4>)
 8004d10:	2202      	movs	r2, #2
 8004d12:	605a      	str	r2, [r3, #4]
#endif  /* USE_STM32469I_DISCO_REVA */
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8004d14:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <LCD_Init+0x1b4>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]

  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004d1a:	4b58      	ldr	r3, [pc, #352]	; (8004e7c <LCD_Init+0x1ac>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]
  hdsi_eval.Init.TXEscapeCkdiv = 0x4;
 8004d20:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <LCD_Init+0x1ac>)
 8004d22:	2204      	movs	r2, #4
 8004d24:	609a      	str	r2, [r3, #8]
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8004d26:	4957      	ldr	r1, [pc, #348]	; (8004e84 <LCD_Init+0x1b4>)
 8004d28:	4854      	ldr	r0, [pc, #336]	; (8004e7c <LCD_Init+0x1ac>)
 8004d2a:	f7fd fb0d 	bl	8002348 <HAL_DSI_Init>

  CmdCfg.VirtualChannelID      = 0;
 8004d2e:	4b56      	ldr	r3, [pc, #344]	; (8004e88 <LCD_Init+0x1b8>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
  CmdCfg.HSPolarity            = DSI_HSYNC_ACTIVE_HIGH;
 8004d34:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <LCD_Init+0x1b8>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	615a      	str	r2, [r3, #20]
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 8004d3a:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <LCD_Init+0x1b8>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004d40:	4b51      	ldr	r3, [pc, #324]	; (8004e88 <LCD_Init+0x1b8>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	61da      	str	r2, [r3, #28]
  CmdCfg.ColorCoding           = DSI_RGB888;
 8004d46:	4b50      	ldr	r3, [pc, #320]	; (8004e88 <LCD_Init+0x1b8>)
 8004d48:	2205      	movs	r2, #5
 8004d4a:	605a      	str	r2, [r3, #4]
  CmdCfg.CommandSize           = HACT;
 8004d4c:	4b4e      	ldr	r3, [pc, #312]	; (8004e88 <LCD_Init+0x1b8>)
 8004d4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004d52:	609a      	str	r2, [r3, #8]
  CmdCfg.TearingEffectSource   = DSI_TE_DSILINK;
 8004d54:	4b4c      	ldr	r3, [pc, #304]	; (8004e88 <LCD_Init+0x1b8>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	60da      	str	r2, [r3, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8004d5a:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <LCD_Init+0x1b8>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  CmdCfg.VSyncPol              = DSI_VSYNC_FALLING;
 8004d60:	4b49      	ldr	r3, [pc, #292]	; (8004e88 <LCD_Init+0x1b8>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	621a      	str	r2, [r3, #32]
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 8004d66:	4b48      	ldr	r3, [pc, #288]	; (8004e88 <LCD_Init+0x1b8>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 8004d6c:	4b46      	ldr	r3, [pc, #280]	; (8004e88 <LCD_Init+0x1b8>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_eval, &CmdCfg);
 8004d72:	4945      	ldr	r1, [pc, #276]	; (8004e88 <LCD_Init+0x1b8>)
 8004d74:	4841      	ldr	r0, [pc, #260]	; (8004e7c <LCD_Init+0x1ac>)
 8004d76:	f7fd fd68 	bl	800284a <HAL_DSI_ConfigAdaptedCommandMode>

  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_ENABLE;
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <LCD_Init+0x1bc>)
 8004d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d80:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8004d82:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <LCD_Init+0x1bc>)
 8004d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d88:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_ENABLE;
 8004d8a:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <LCD_Init+0x1bc>)
 8004d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d90:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 8004d92:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <LCD_Init+0x1bc>)
 8004d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d98:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_ENABLE;
 8004d9a:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <LCD_Init+0x1bc>)
 8004d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004da0:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8004da2:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <LCD_Init+0x1bc>)
 8004da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004da8:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_ENABLE;
 8004daa:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <LCD_Init+0x1bc>)
 8004dac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004db0:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <LCD_Init+0x1bc>)
 8004db4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004db8:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_ENABLE;
 8004dba:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <LCD_Init+0x1bc>)
 8004dbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dc0:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 8004dc2:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <LCD_Init+0x1bc>)
 8004dc4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <LCD_Init+0x1bc>)
 8004dcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi_eval, &LPCmd);
 8004dd2:	492e      	ldr	r1, [pc, #184]	; (8004e8c <LCD_Init+0x1bc>)
 8004dd4:	4829      	ldr	r0, [pc, #164]	; (8004e7c <LCD_Init+0x1ac>)
 8004dd6:	f7fd fe0f 	bl	80029f8 <HAL_DSI_ConfigCommand>

  PhyTimings.ClockLaneHS2LPTime = 35;
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <LCD_Init+0x1c0>)
 8004ddc:	2223      	movs	r2, #35	; 0x23
 8004dde:	601a      	str	r2, [r3, #0]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8004de0:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <LCD_Init+0x1c0>)
 8004de2:	2223      	movs	r2, #35	; 0x23
 8004de4:	605a      	str	r2, [r3, #4]
  PhyTimings.DataLaneHS2LPTime = 35;
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <LCD_Init+0x1c0>)
 8004de8:	2223      	movs	r2, #35	; 0x23
 8004dea:	609a      	str	r2, [r3, #8]
  PhyTimings.DataLaneLP2HSTime = 35;
 8004dec:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <LCD_Init+0x1c0>)
 8004dee:	2223      	movs	r2, #35	; 0x23
 8004df0:	60da      	str	r2, [r3, #12]
  PhyTimings.DataLaneMaxReadTime = 0;
 8004df2:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <LCD_Init+0x1c0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	611a      	str	r2, [r3, #16]
  PhyTimings.StopWaitTime = 10;
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <LCD_Init+0x1c0>)
 8004dfa:	220a      	movs	r2, #10
 8004dfc:	615a      	str	r2, [r3, #20]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8004dfe:	4924      	ldr	r1, [pc, #144]	; (8004e90 <LCD_Init+0x1c0>)
 8004e00:	481e      	ldr	r0, [pc, #120]	; (8004e7c <LCD_Init+0x1ac>)
 8004e02:	f7fd fe7f 	bl	8002b04 <HAL_DSI_ConfigPhyTimer>

  LTDC_Init();
 8004e06:	f000 f845 	bl	8004e94 <LTDC_Init>

  HAL_DSI_Start(&(hdsi_eval));
 8004e0a:	481c      	ldr	r0, [pc, #112]	; (8004e7c <LCD_Init+0x1ac>)
 8004e0c:	f7fd fee4 	bl	8002bd8 <HAL_DSI_Start>

#if defined (USE_STM32469I_DISCO_REVC)
  NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 8004e10:	2101      	movs	r1, #1
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fb fbc2 	bl	800059c <NT35510_Init>
#else
  OTM8009A_Init(OTM8009A_COLMOD_RGB888, LCD_ORIENTATION_LANDSCAPE);
#endif

  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 8004e18:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <LCD_Init+0x1bc>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <LCD_Init+0x1bc>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <LCD_Init+0x1bc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <LCD_Init+0x1bc>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <LCD_Init+0x1bc>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <LCD_Init+0x1bc>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <LCD_Init+0x1bc>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <LCD_Init+0x1bc>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <LCD_Init+0x1bc>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <LCD_Init+0x1bc>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <LCD_Init+0x1bc>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi_eval, &LPCmd);
 8004e5a:	490c      	ldr	r1, [pc, #48]	; (8004e8c <LCD_Init+0x1bc>)
 8004e5c:	4807      	ldr	r0, [pc, #28]	; (8004e7c <LCD_Init+0x1ac>)
 8004e5e:	f7fd fdcb 	bl	80029f8 <HAL_DSI_ConfigCommand>

   HAL_DSI_ConfigFlowControl(&hdsi_eval, DSI_FLOW_CONTROL_BTA);
 8004e62:	2104      	movs	r1, #4
 8004e64:	4805      	ldr	r0, [pc, #20]	; (8004e7c <LCD_Init+0x1ac>)
 8004e66:	f7fd fe25 	bl	8002ab4 <HAL_DSI_ConfigFlowControl>
  HAL_DSI_Refresh(&hdsi_eval);
 8004e6a:	4804      	ldr	r0, [pc, #16]	; (8004e7c <LCD_Init+0x1ac>)
 8004e6c:	f7fd fef0 	bl	8002c50 <HAL_DSI_Refresh>

  return LCD_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200002dc 	.word	0x200002dc
 8004e7c:	200001a0 	.word	0x200001a0
 8004e80:	40016c00 	.word	0x40016c00
 8004e84:	20000318 	.word	0x20000318
 8004e88:	20000324 	.word	0x20000324
 8004e8c:	20000350 	.word	0x20000350
 8004e90:	20000384 	.word	0x20000384

08004e94 <LTDC_Init>:

void LTDC_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  hltdc_eval.Instance = LTDC;
 8004e98:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <LTDC_Init+0x88>)
 8004e9a:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <LTDC_Init+0x8c>)
 8004e9c:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&hltdc_eval);
 8004e9e:	481f      	ldr	r0, [pc, #124]	; (8004f1c <LTDC_Init+0x88>)
 8004ea0:	f7fe fa48 	bl	8003334 <HAL_LTDC_DeInit>

  hltdc_eval.Init.HorizontalSync = HSYNC;
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <LTDC_Init+0x88>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]
  hltdc_eval.Init.VerticalSync = VSYNC;
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <LTDC_Init+0x88>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	619a      	str	r2, [r3, #24]
  hltdc_eval.Init.AccumulatedHBP = HSYNC+HBP;
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <LTDC_Init+0x88>)
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	61da      	str	r2, [r3, #28]
  hltdc_eval.Init.AccumulatedVBP = VSYNC+VBP;
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <LTDC_Init+0x88>)
 8004eb8:	2202      	movs	r2, #2
 8004eba:	621a      	str	r2, [r3, #32]
  hltdc_eval.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <LTDC_Init+0x88>)
 8004ebe:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc_eval.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <LTDC_Init+0x88>)
 8004ec6:	f240 3222 	movw	r2, #802	; 0x322
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc_eval.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <LTDC_Init+0x88>)
 8004ece:	f240 12e3 	movw	r2, #483	; 0x1e3
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc_eval.Init.TotalWidth = HSYNC+HBP+HACT+HFP;
 8004ed4:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <LTDC_Init+0x88>)
 8004ed6:	f240 3223 	movw	r2, #803	; 0x323
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c

  hltdc_eval.Init.Backcolor.Blue = 0;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <LTDC_Init+0x88>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <LTDC_Init+0x88>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <LTDC_Init+0x88>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  hltdc_eval.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <LTDC_Init+0x88>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	605a      	str	r2, [r3, #4]
  hltdc_eval.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <LTDC_Init+0x88>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
  hltdc_eval.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <LTDC_Init+0x88>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	60da      	str	r2, [r3, #12]
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <LTDC_Init+0x88>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <LTDC_Init+0x88>)
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <LTDC_Init+0x8c>)
 8004f10:	601a      	str	r2, [r3, #0]

  HAL_LTDC_Init(&hltdc_eval);
 8004f12:	4802      	ldr	r0, [pc, #8]	; (8004f1c <LTDC_Init+0x88>)
 8004f14:	f7fe f93e 	bl	8003194 <HAL_LTDC_Init>
}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200000f8 	.word	0x200000f8
 8004f20:	40016800 	.word	0x40016800

08004f24 <LCD_BriefDisplay>:

static void LCD_BriefDisplay(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08e      	sub	sp, #56	; 0x38
 8004f28:	af00      	add	r7, sp, #0
  int tempRead = ReadTemperature();
 8004f2a:	f7ff fe31 	bl	8004b90 <ReadTemperature>
 8004f2e:	6378      	str	r0, [r7, #52]	; 0x34
  BSP_LCD_SetFont(&Font24);
 8004f30:	481c      	ldr	r0, [pc, #112]	; (8004fa4 <LCD_BriefDisplay+0x80>)
 8004f32:	f7fb fe45 	bl	8000bc0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8004f36:	481c      	ldr	r0, [pc, #112]	; (8004fa8 <LCD_BriefDisplay+0x84>)
 8004f38:	f7fb fe10 	bl	8000b5c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, 800, 112);
 8004f3c:	2370      	movs	r3, #112	; 0x70
 8004f3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004f42:	2100      	movs	r1, #0
 8004f44:	2000      	movs	r0, #0
 8004f46:	f7fb ff8f 	bl	8000e68 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	f7fb fe05 	bl	8000b5c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 112, 800, 368);
 8004f52:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8004f56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004f5a:	2170      	movs	r1, #112	; 0x70
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f7fb ff83 	bl	8000e68 <BSP_LCD_FillRect>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8004f62:	4811      	ldr	r0, [pc, #68]	; (8004fa8 <LCD_BriefDisplay+0x84>)
 8004f64:	f7fb fe12 	bl	8000b8c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"      Room temperature");
 8004f68:	4910      	ldr	r1, [pc, #64]	; (8004fac <LCD_BriefDisplay+0x88>)
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f7fb ff64 	bl	8000e38 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetFont(&Font16);
 8004f70:	480f      	ldr	r0, [pc, #60]	; (8004fb0 <LCD_BriefDisplay+0x8c>)
 8004f72:	f7fb fe25 	bl	8000bc0 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"      This shows the temperature in the house ");
 8004f76:	490f      	ldr	r1, [pc, #60]	; (8004fb4 <LCD_BriefDisplay+0x90>)
 8004f78:	2004      	movs	r0, #4
 8004f7a:	f7fb ff5d 	bl	8000e38 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"      This is a proof of concept     ");
 8004f7e:	490e      	ldr	r1, [pc, #56]	; (8004fb8 <LCD_BriefDisplay+0x94>)
 8004f80:	2005      	movs	r0, #5
 8004f82:	f7fb ff59 	bl	8000e38 <BSP_LCD_DisplayStringAtLine>
  char tempString[50];
  sprintf(tempString, "The temperature is: %d", tempRead);
 8004f86:	463b      	mov	r3, r7
 8004f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8a:	490c      	ldr	r1, [pc, #48]	; (8004fbc <LCD_BriefDisplay+0x98>)
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f8eb 	bl	8005168 <siprintf>
  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)tempString);
 8004f92:	463b      	mov	r3, r7
 8004f94:	4619      	mov	r1, r3
 8004f96:	200a      	movs	r0, #10
 8004f98:	f7fb ff4e 	bl	8000e38 <BSP_LCD_DisplayStringAtLine>
}
 8004f9c:	bf00      	nop
 8004f9e:	3738      	adds	r7, #56	; 0x38
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000020 	.word	0x20000020
 8004fa8:	ff0000ff 	.word	0xff0000ff
 8004fac:	08005afc 	.word	0x08005afc
 8004fb0:	20000028 	.word	0x20000028
 8004fb4:	08005b14 	.word	0x08005b14
 8004fb8:	08005b44 	.word	0x08005b44
 8004fbc:	08005b6c 	.word	0x08005b6c

08004fc0 <CopyBuffer>:

static void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	80fb      	strh	r3, [r7, #6]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 4;
 8004fd6:	88bb      	ldrh	r3, [r7, #4]
 8004fd8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004fdc:	fb03 f202 	mul.w	r2, r3, r2
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4413      	add	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t source      = (uint32_t)pSrc;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	613b      	str	r3, [r7, #16]

  hdma2d.Init.Mode         = DMA2D_M2M;
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <CopyBuffer+0xb0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <CopyBuffer+0xb0>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 800 - xsize;
 8004ffe:	8c3b      	ldrh	r3, [r7, #32]
 8005000:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8005004:	461a      	mov	r2, r3
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <CopyBuffer+0xb0>)
 8005008:	60da      	str	r2, [r3, #12]

  hdma2d.XferCpltCallback  = NULL;
 800500a:	4b19      	ldr	r3, [pc, #100]	; (8005070 <CopyBuffer+0xb0>)
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]

  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <CopyBuffer+0xb0>)
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <CopyBuffer+0xb0>)
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800501c:	4b14      	ldr	r3, [pc, #80]	; (8005070 <CopyBuffer+0xb0>)
 800501e:	2200      	movs	r2, #0
 8005020:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <CopyBuffer+0xb0>)
 8005024:	2200      	movs	r2, #0
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  hdma2d.Instance          = DMA2D;
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <CopyBuffer+0xb0>)
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <CopyBuffer+0xb4>)
 800502c:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800502e:	4810      	ldr	r0, [pc, #64]	; (8005070 <CopyBuffer+0xb0>)
 8005030:	f7fc feac 	bl	8001d8c <HAL_DMA2D_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d116      	bne.n	8005068 <CopyBuffer+0xa8>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 800503a:	2101      	movs	r1, #1
 800503c:	480c      	ldr	r0, [pc, #48]	; (8005070 <CopyBuffer+0xb0>)
 800503e:	f7fd f80d 	bl	800205c <HAL_DMA2D_ConfigLayer>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10f      	bne.n	8005068 <CopyBuffer+0xa8>
    {
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8005048:	8c3a      	ldrh	r2, [r7, #32]
 800504a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	4806      	ldr	r0, [pc, #24]	; (8005070 <CopyBuffer+0xb0>)
 8005056:	f7fc feec 	bl	8001e32 <HAL_DMA2D_Start>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <CopyBuffer+0xa8>
      {
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8005060:	2164      	movs	r1, #100	; 0x64
 8005062:	4803      	ldr	r0, [pc, #12]	; (8005070 <CopyBuffer+0xb0>)
 8005064:	f7fc ff10 	bl	8001e88 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005068:	bf00      	nop
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	2000029c 	.word	0x2000029c
 8005074:	4002b000 	.word	0x4002b000

08005078 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800508a:	e7fe      	b.n	800508a <HardFault_Handler+0x4>

0800508c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005090:	e7fe      	b.n	8005090 <MemManage_Handler+0x4>

08005092 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005096:	e7fe      	b.n	8005096 <BusFault_Handler+0x4>

08005098 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800509c:	e7fe      	b.n	800509c <UsageFault_Handler+0x4>

0800509e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
}
 80050a2:	bf00      	nop
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80050cc:	f7fc fb4a 	bl	8001764 <HAL_IncTick>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <LTDC_IRQHandler>:
  * @brief  This function handles LTDC interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hltdc_eval);
 80050d8:	4802      	ldr	r0, [pc, #8]	; (80050e4 <LTDC_IRQHandler+0x10>)
 80050da:	f7fe f996 	bl	800340a <HAL_LTDC_IRQHandler>
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200000f8 	.word	0x200000f8

080050e8 <DSI_IRQHandler>:
  * @brief  This function handles DSI Handler.
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  HAL_DSI_IRQHandler(&hdsi_eval);
 80050ec:	4802      	ldr	r0, [pc, #8]	; (80050f8 <DSI_IRQHandler+0x10>)
 80050ee:	f7fd facf 	bl	8002690 <HAL_DSI_IRQHandler>
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200001a0 	.word	0x200001a0

080050fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005104:	4a14      	ldr	r2, [pc, #80]	; (8005158 <_sbrk+0x5c>)
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <_sbrk+0x60>)
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <_sbrk+0x64>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005118:	4b11      	ldr	r3, [pc, #68]	; (8005160 <_sbrk+0x64>)
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <_sbrk+0x68>)
 800511c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <_sbrk+0x64>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	429a      	cmp	r2, r3
 800512a:	d207      	bcs.n	800513c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800512c:	f000 f83c 	bl	80051a8 <__errno>
 8005130:	4603      	mov	r3, r0
 8005132:	220c      	movs	r2, #12
 8005134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	e009      	b.n	8005150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <_sbrk+0x64>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <_sbrk+0x64>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	4a05      	ldr	r2, [pc, #20]	; (8005160 <_sbrk+0x64>)
 800514c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800514e:	68fb      	ldr	r3, [r7, #12]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20050000 	.word	0x20050000
 800515c:	00000400 	.word	0x00000400
 8005160:	2000039c 	.word	0x2000039c
 8005164:	200004e8 	.word	0x200004e8

08005168 <siprintf>:
 8005168:	b40e      	push	{r1, r2, r3}
 800516a:	b500      	push	{lr}
 800516c:	b09c      	sub	sp, #112	; 0x70
 800516e:	ab1d      	add	r3, sp, #116	; 0x74
 8005170:	9002      	str	r0, [sp, #8]
 8005172:	9006      	str	r0, [sp, #24]
 8005174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005178:	4809      	ldr	r0, [pc, #36]	; (80051a0 <siprintf+0x38>)
 800517a:	9107      	str	r1, [sp, #28]
 800517c:	9104      	str	r1, [sp, #16]
 800517e:	4909      	ldr	r1, [pc, #36]	; (80051a4 <siprintf+0x3c>)
 8005180:	f853 2b04 	ldr.w	r2, [r3], #4
 8005184:	9105      	str	r1, [sp, #20]
 8005186:	6800      	ldr	r0, [r0, #0]
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	a902      	add	r1, sp, #8
 800518c:	f000 f98a 	bl	80054a4 <_svfiprintf_r>
 8005190:	9b02      	ldr	r3, [sp, #8]
 8005192:	2200      	movs	r2, #0
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	b01c      	add	sp, #112	; 0x70
 8005198:	f85d eb04 	ldr.w	lr, [sp], #4
 800519c:	b003      	add	sp, #12
 800519e:	4770      	bx	lr
 80051a0:	20000098 	.word	0x20000098
 80051a4:	ffff0208 	.word	0xffff0208

080051a8 <__errno>:
 80051a8:	4b01      	ldr	r3, [pc, #4]	; (80051b0 <__errno+0x8>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000098 	.word	0x20000098

080051b4 <__libc_init_array>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	4d0d      	ldr	r5, [pc, #52]	; (80051ec <__libc_init_array+0x38>)
 80051b8:	4c0d      	ldr	r4, [pc, #52]	; (80051f0 <__libc_init_array+0x3c>)
 80051ba:	1b64      	subs	r4, r4, r5
 80051bc:	10a4      	asrs	r4, r4, #2
 80051be:	2600      	movs	r6, #0
 80051c0:	42a6      	cmp	r6, r4
 80051c2:	d109      	bne.n	80051d8 <__libc_init_array+0x24>
 80051c4:	4d0b      	ldr	r5, [pc, #44]	; (80051f4 <__libc_init_array+0x40>)
 80051c6:	4c0c      	ldr	r4, [pc, #48]	; (80051f8 <__libc_init_array+0x44>)
 80051c8:	f000 fc6a 	bl	8005aa0 <_init>
 80051cc:	1b64      	subs	r4, r4, r5
 80051ce:	10a4      	asrs	r4, r4, #2
 80051d0:	2600      	movs	r6, #0
 80051d2:	42a6      	cmp	r6, r4
 80051d4:	d105      	bne.n	80051e2 <__libc_init_array+0x2e>
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051dc:	4798      	blx	r3
 80051de:	3601      	adds	r6, #1
 80051e0:	e7ee      	b.n	80051c0 <__libc_init_array+0xc>
 80051e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e6:	4798      	blx	r3
 80051e8:	3601      	adds	r6, #1
 80051ea:	e7f2      	b.n	80051d2 <__libc_init_array+0x1e>
 80051ec:	08053270 	.word	0x08053270
 80051f0:	08053270 	.word	0x08053270
 80051f4:	08053270 	.word	0x08053270
 80051f8:	08053274 	.word	0x08053274

080051fc <__retarget_lock_acquire_recursive>:
 80051fc:	4770      	bx	lr

080051fe <__retarget_lock_release_recursive>:
 80051fe:	4770      	bx	lr

08005200 <_free_r>:
 8005200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005202:	2900      	cmp	r1, #0
 8005204:	d044      	beq.n	8005290 <_free_r+0x90>
 8005206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520a:	9001      	str	r0, [sp, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f1a1 0404 	sub.w	r4, r1, #4
 8005212:	bfb8      	it	lt
 8005214:	18e4      	addlt	r4, r4, r3
 8005216:	f000 f8df 	bl	80053d8 <__malloc_lock>
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <_free_r+0x94>)
 800521c:	9801      	ldr	r0, [sp, #4]
 800521e:	6813      	ldr	r3, [r2, #0]
 8005220:	b933      	cbnz	r3, 8005230 <_free_r+0x30>
 8005222:	6063      	str	r3, [r4, #4]
 8005224:	6014      	str	r4, [r2, #0]
 8005226:	b003      	add	sp, #12
 8005228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800522c:	f000 b8da 	b.w	80053e4 <__malloc_unlock>
 8005230:	42a3      	cmp	r3, r4
 8005232:	d908      	bls.n	8005246 <_free_r+0x46>
 8005234:	6825      	ldr	r5, [r4, #0]
 8005236:	1961      	adds	r1, r4, r5
 8005238:	428b      	cmp	r3, r1
 800523a:	bf01      	itttt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	1949      	addeq	r1, r1, r5
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	e7ed      	b.n	8005222 <_free_r+0x22>
 8005246:	461a      	mov	r2, r3
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b10b      	cbz	r3, 8005250 <_free_r+0x50>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d9fa      	bls.n	8005246 <_free_r+0x46>
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	1855      	adds	r5, r2, r1
 8005254:	42a5      	cmp	r5, r4
 8005256:	d10b      	bne.n	8005270 <_free_r+0x70>
 8005258:	6824      	ldr	r4, [r4, #0]
 800525a:	4421      	add	r1, r4
 800525c:	1854      	adds	r4, r2, r1
 800525e:	42a3      	cmp	r3, r4
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	d1e0      	bne.n	8005226 <_free_r+0x26>
 8005264:	681c      	ldr	r4, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	440c      	add	r4, r1
 800526c:	6014      	str	r4, [r2, #0]
 800526e:	e7da      	b.n	8005226 <_free_r+0x26>
 8005270:	d902      	bls.n	8005278 <_free_r+0x78>
 8005272:	230c      	movs	r3, #12
 8005274:	6003      	str	r3, [r0, #0]
 8005276:	e7d6      	b.n	8005226 <_free_r+0x26>
 8005278:	6825      	ldr	r5, [r4, #0]
 800527a:	1961      	adds	r1, r4, r5
 800527c:	428b      	cmp	r3, r1
 800527e:	bf04      	itt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	6063      	str	r3, [r4, #4]
 8005286:	bf04      	itt	eq
 8005288:	1949      	addeq	r1, r1, r5
 800528a:	6021      	streq	r1, [r4, #0]
 800528c:	6054      	str	r4, [r2, #4]
 800528e:	e7ca      	b.n	8005226 <_free_r+0x26>
 8005290:	b003      	add	sp, #12
 8005292:	bd30      	pop	{r4, r5, pc}
 8005294:	200004e0 	.word	0x200004e0

08005298 <sbrk_aligned>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0e      	ldr	r6, [pc, #56]	; (80052d4 <sbrk_aligned+0x3c>)
 800529c:	460c      	mov	r4, r1
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	4605      	mov	r5, r0
 80052a2:	b911      	cbnz	r1, 80052aa <sbrk_aligned+0x12>
 80052a4:	f000 fba6 	bl	80059f4 <_sbrk_r>
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fba1 	bl	80059f4 <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d00a      	beq.n	80052cc <sbrk_aligned+0x34>
 80052b6:	1cc4      	adds	r4, r0, #3
 80052b8:	f024 0403 	bic.w	r4, r4, #3
 80052bc:	42a0      	cmp	r0, r4
 80052be:	d007      	beq.n	80052d0 <sbrk_aligned+0x38>
 80052c0:	1a21      	subs	r1, r4, r0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 fb96 	bl	80059f4 <_sbrk_r>
 80052c8:	3001      	adds	r0, #1
 80052ca:	d101      	bne.n	80052d0 <sbrk_aligned+0x38>
 80052cc:	f04f 34ff 	mov.w	r4, #4294967295
 80052d0:	4620      	mov	r0, r4
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	200004e4 	.word	0x200004e4

080052d8 <_malloc_r>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	1ccd      	adds	r5, r1, #3
 80052de:	f025 0503 	bic.w	r5, r5, #3
 80052e2:	3508      	adds	r5, #8
 80052e4:	2d0c      	cmp	r5, #12
 80052e6:	bf38      	it	cc
 80052e8:	250c      	movcc	r5, #12
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	4607      	mov	r7, r0
 80052ee:	db01      	blt.n	80052f4 <_malloc_r+0x1c>
 80052f0:	42a9      	cmp	r1, r5
 80052f2:	d905      	bls.n	8005300 <_malloc_r+0x28>
 80052f4:	230c      	movs	r3, #12
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	2600      	movs	r6, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005300:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053d4 <_malloc_r+0xfc>
 8005304:	f000 f868 	bl	80053d8 <__malloc_lock>
 8005308:	f8d8 3000 	ldr.w	r3, [r8]
 800530c:	461c      	mov	r4, r3
 800530e:	bb5c      	cbnz	r4, 8005368 <_malloc_r+0x90>
 8005310:	4629      	mov	r1, r5
 8005312:	4638      	mov	r0, r7
 8005314:	f7ff ffc0 	bl	8005298 <sbrk_aligned>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	4604      	mov	r4, r0
 800531c:	d155      	bne.n	80053ca <_malloc_r+0xf2>
 800531e:	f8d8 4000 	ldr.w	r4, [r8]
 8005322:	4626      	mov	r6, r4
 8005324:	2e00      	cmp	r6, #0
 8005326:	d145      	bne.n	80053b4 <_malloc_r+0xdc>
 8005328:	2c00      	cmp	r4, #0
 800532a:	d048      	beq.n	80053be <_malloc_r+0xe6>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	4631      	mov	r1, r6
 8005330:	4638      	mov	r0, r7
 8005332:	eb04 0903 	add.w	r9, r4, r3
 8005336:	f000 fb5d 	bl	80059f4 <_sbrk_r>
 800533a:	4581      	cmp	r9, r0
 800533c:	d13f      	bne.n	80053be <_malloc_r+0xe6>
 800533e:	6821      	ldr	r1, [r4, #0]
 8005340:	1a6d      	subs	r5, r5, r1
 8005342:	4629      	mov	r1, r5
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff ffa7 	bl	8005298 <sbrk_aligned>
 800534a:	3001      	adds	r0, #1
 800534c:	d037      	beq.n	80053be <_malloc_r+0xe6>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	442b      	add	r3, r5
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	f8d8 3000 	ldr.w	r3, [r8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d038      	beq.n	80053ce <_malloc_r+0xf6>
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	42a2      	cmp	r2, r4
 8005360:	d12b      	bne.n	80053ba <_malloc_r+0xe2>
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	e00f      	b.n	8005388 <_malloc_r+0xb0>
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	1b52      	subs	r2, r2, r5
 800536c:	d41f      	bmi.n	80053ae <_malloc_r+0xd6>
 800536e:	2a0b      	cmp	r2, #11
 8005370:	d917      	bls.n	80053a2 <_malloc_r+0xca>
 8005372:	1961      	adds	r1, r4, r5
 8005374:	42a3      	cmp	r3, r4
 8005376:	6025      	str	r5, [r4, #0]
 8005378:	bf18      	it	ne
 800537a:	6059      	strne	r1, [r3, #4]
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	bf08      	it	eq
 8005380:	f8c8 1000 	streq.w	r1, [r8]
 8005384:	5162      	str	r2, [r4, r5]
 8005386:	604b      	str	r3, [r1, #4]
 8005388:	4638      	mov	r0, r7
 800538a:	f104 060b 	add.w	r6, r4, #11
 800538e:	f000 f829 	bl	80053e4 <__malloc_unlock>
 8005392:	f026 0607 	bic.w	r6, r6, #7
 8005396:	1d23      	adds	r3, r4, #4
 8005398:	1af2      	subs	r2, r6, r3
 800539a:	d0ae      	beq.n	80052fa <_malloc_r+0x22>
 800539c:	1b9b      	subs	r3, r3, r6
 800539e:	50a3      	str	r3, [r4, r2]
 80053a0:	e7ab      	b.n	80052fa <_malloc_r+0x22>
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	6862      	ldr	r2, [r4, #4]
 80053a6:	d1dd      	bne.n	8005364 <_malloc_r+0x8c>
 80053a8:	f8c8 2000 	str.w	r2, [r8]
 80053ac:	e7ec      	b.n	8005388 <_malloc_r+0xb0>
 80053ae:	4623      	mov	r3, r4
 80053b0:	6864      	ldr	r4, [r4, #4]
 80053b2:	e7ac      	b.n	800530e <_malloc_r+0x36>
 80053b4:	4634      	mov	r4, r6
 80053b6:	6876      	ldr	r6, [r6, #4]
 80053b8:	e7b4      	b.n	8005324 <_malloc_r+0x4c>
 80053ba:	4613      	mov	r3, r2
 80053bc:	e7cc      	b.n	8005358 <_malloc_r+0x80>
 80053be:	230c      	movs	r3, #12
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4638      	mov	r0, r7
 80053c4:	f000 f80e 	bl	80053e4 <__malloc_unlock>
 80053c8:	e797      	b.n	80052fa <_malloc_r+0x22>
 80053ca:	6025      	str	r5, [r4, #0]
 80053cc:	e7dc      	b.n	8005388 <_malloc_r+0xb0>
 80053ce:	605b      	str	r3, [r3, #4]
 80053d0:	deff      	udf	#255	; 0xff
 80053d2:	bf00      	nop
 80053d4:	200004e0 	.word	0x200004e0

080053d8 <__malloc_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__malloc_lock+0x8>)
 80053da:	f7ff bf0f 	b.w	80051fc <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	200004dc 	.word	0x200004dc

080053e4 <__malloc_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__malloc_unlock+0x8>)
 80053e6:	f7ff bf0a 	b.w	80051fe <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	200004dc 	.word	0x200004dc

080053f0 <__ssputs_r>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	688e      	ldr	r6, [r1, #8]
 80053f6:	461f      	mov	r7, r3
 80053f8:	42be      	cmp	r6, r7
 80053fa:	680b      	ldr	r3, [r1, #0]
 80053fc:	4682      	mov	sl, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	4690      	mov	r8, r2
 8005402:	d82c      	bhi.n	800545e <__ssputs_r+0x6e>
 8005404:	898a      	ldrh	r2, [r1, #12]
 8005406:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800540a:	d026      	beq.n	800545a <__ssputs_r+0x6a>
 800540c:	6965      	ldr	r5, [r4, #20]
 800540e:	6909      	ldr	r1, [r1, #16]
 8005410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005414:	eba3 0901 	sub.w	r9, r3, r1
 8005418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800541c:	1c7b      	adds	r3, r7, #1
 800541e:	444b      	add	r3, r9
 8005420:	106d      	asrs	r5, r5, #1
 8005422:	429d      	cmp	r5, r3
 8005424:	bf38      	it	cc
 8005426:	461d      	movcc	r5, r3
 8005428:	0553      	lsls	r3, r2, #21
 800542a:	d527      	bpl.n	800547c <__ssputs_r+0x8c>
 800542c:	4629      	mov	r1, r5
 800542e:	f7ff ff53 	bl	80052d8 <_malloc_r>
 8005432:	4606      	mov	r6, r0
 8005434:	b360      	cbz	r0, 8005490 <__ssputs_r+0xa0>
 8005436:	6921      	ldr	r1, [r4, #16]
 8005438:	464a      	mov	r2, r9
 800543a:	f000 faeb 	bl	8005a14 <memcpy>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	6126      	str	r6, [r4, #16]
 800544c:	6165      	str	r5, [r4, #20]
 800544e:	444e      	add	r6, r9
 8005450:	eba5 0509 	sub.w	r5, r5, r9
 8005454:	6026      	str	r6, [r4, #0]
 8005456:	60a5      	str	r5, [r4, #8]
 8005458:	463e      	mov	r6, r7
 800545a:	42be      	cmp	r6, r7
 800545c:	d900      	bls.n	8005460 <__ssputs_r+0x70>
 800545e:	463e      	mov	r6, r7
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	4632      	mov	r2, r6
 8005464:	4641      	mov	r1, r8
 8005466:	f000 faab 	bl	80059c0 <memmove>
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	1b9b      	subs	r3, r3, r6
 800546e:	60a3      	str	r3, [r4, #8]
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	4433      	add	r3, r6
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	2000      	movs	r0, #0
 8005478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547c:	462a      	mov	r2, r5
 800547e:	f000 fad7 	bl	8005a30 <_realloc_r>
 8005482:	4606      	mov	r6, r0
 8005484:	2800      	cmp	r0, #0
 8005486:	d1e0      	bne.n	800544a <__ssputs_r+0x5a>
 8005488:	6921      	ldr	r1, [r4, #16]
 800548a:	4650      	mov	r0, sl
 800548c:	f7ff feb8 	bl	8005200 <_free_r>
 8005490:	230c      	movs	r3, #12
 8005492:	f8ca 3000 	str.w	r3, [sl]
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	f04f 30ff 	mov.w	r0, #4294967295
 80054a2:	e7e9      	b.n	8005478 <__ssputs_r+0x88>

080054a4 <_svfiprintf_r>:
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	4698      	mov	r8, r3
 80054aa:	898b      	ldrh	r3, [r1, #12]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	b09d      	sub	sp, #116	; 0x74
 80054b0:	4607      	mov	r7, r0
 80054b2:	460d      	mov	r5, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	d50e      	bpl.n	80054d6 <_svfiprintf_r+0x32>
 80054b8:	690b      	ldr	r3, [r1, #16]
 80054ba:	b963      	cbnz	r3, 80054d6 <_svfiprintf_r+0x32>
 80054bc:	2140      	movs	r1, #64	; 0x40
 80054be:	f7ff ff0b 	bl	80052d8 <_malloc_r>
 80054c2:	6028      	str	r0, [r5, #0]
 80054c4:	6128      	str	r0, [r5, #16]
 80054c6:	b920      	cbnz	r0, 80054d2 <_svfiprintf_r+0x2e>
 80054c8:	230c      	movs	r3, #12
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	e0d0      	b.n	8005674 <_svfiprintf_r+0x1d0>
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	616b      	str	r3, [r5, #20]
 80054d6:	2300      	movs	r3, #0
 80054d8:	9309      	str	r3, [sp, #36]	; 0x24
 80054da:	2320      	movs	r3, #32
 80054dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e4:	2330      	movs	r3, #48	; 0x30
 80054e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800568c <_svfiprintf_r+0x1e8>
 80054ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054ee:	f04f 0901 	mov.w	r9, #1
 80054f2:	4623      	mov	r3, r4
 80054f4:	469a      	mov	sl, r3
 80054f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054fa:	b10a      	cbz	r2, 8005500 <_svfiprintf_r+0x5c>
 80054fc:	2a25      	cmp	r2, #37	; 0x25
 80054fe:	d1f9      	bne.n	80054f4 <_svfiprintf_r+0x50>
 8005500:	ebba 0b04 	subs.w	fp, sl, r4
 8005504:	d00b      	beq.n	800551e <_svfiprintf_r+0x7a>
 8005506:	465b      	mov	r3, fp
 8005508:	4622      	mov	r2, r4
 800550a:	4629      	mov	r1, r5
 800550c:	4638      	mov	r0, r7
 800550e:	f7ff ff6f 	bl	80053f0 <__ssputs_r>
 8005512:	3001      	adds	r0, #1
 8005514:	f000 80a9 	beq.w	800566a <_svfiprintf_r+0x1c6>
 8005518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551a:	445a      	add	r2, fp
 800551c:	9209      	str	r2, [sp, #36]	; 0x24
 800551e:	f89a 3000 	ldrb.w	r3, [sl]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80a1 	beq.w	800566a <_svfiprintf_r+0x1c6>
 8005528:	2300      	movs	r3, #0
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005532:	f10a 0a01 	add.w	sl, sl, #1
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	9307      	str	r3, [sp, #28]
 800553a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800553e:	931a      	str	r3, [sp, #104]	; 0x68
 8005540:	4654      	mov	r4, sl
 8005542:	2205      	movs	r2, #5
 8005544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005548:	4850      	ldr	r0, [pc, #320]	; (800568c <_svfiprintf_r+0x1e8>)
 800554a:	f7fa fe59 	bl	8000200 <memchr>
 800554e:	9a04      	ldr	r2, [sp, #16]
 8005550:	b9d8      	cbnz	r0, 800558a <_svfiprintf_r+0xe6>
 8005552:	06d0      	lsls	r0, r2, #27
 8005554:	bf44      	itt	mi
 8005556:	2320      	movmi	r3, #32
 8005558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555c:	0711      	lsls	r1, r2, #28
 800555e:	bf44      	itt	mi
 8005560:	232b      	movmi	r3, #43	; 0x2b
 8005562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005566:	f89a 3000 	ldrb.w	r3, [sl]
 800556a:	2b2a      	cmp	r3, #42	; 0x2a
 800556c:	d015      	beq.n	800559a <_svfiprintf_r+0xf6>
 800556e:	9a07      	ldr	r2, [sp, #28]
 8005570:	4654      	mov	r4, sl
 8005572:	2000      	movs	r0, #0
 8005574:	f04f 0c0a 	mov.w	ip, #10
 8005578:	4621      	mov	r1, r4
 800557a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800557e:	3b30      	subs	r3, #48	; 0x30
 8005580:	2b09      	cmp	r3, #9
 8005582:	d94d      	bls.n	8005620 <_svfiprintf_r+0x17c>
 8005584:	b1b0      	cbz	r0, 80055b4 <_svfiprintf_r+0x110>
 8005586:	9207      	str	r2, [sp, #28]
 8005588:	e014      	b.n	80055b4 <_svfiprintf_r+0x110>
 800558a:	eba0 0308 	sub.w	r3, r0, r8
 800558e:	fa09 f303 	lsl.w	r3, r9, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	9304      	str	r3, [sp, #16]
 8005596:	46a2      	mov	sl, r4
 8005598:	e7d2      	b.n	8005540 <_svfiprintf_r+0x9c>
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	1d19      	adds	r1, r3, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	9103      	str	r1, [sp, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfbb      	ittet	lt
 80055a6:	425b      	neglt	r3, r3
 80055a8:	f042 0202 	orrlt.w	r2, r2, #2
 80055ac:	9307      	strge	r3, [sp, #28]
 80055ae:	9307      	strlt	r3, [sp, #28]
 80055b0:	bfb8      	it	lt
 80055b2:	9204      	strlt	r2, [sp, #16]
 80055b4:	7823      	ldrb	r3, [r4, #0]
 80055b6:	2b2e      	cmp	r3, #46	; 0x2e
 80055b8:	d10c      	bne.n	80055d4 <_svfiprintf_r+0x130>
 80055ba:	7863      	ldrb	r3, [r4, #1]
 80055bc:	2b2a      	cmp	r3, #42	; 0x2a
 80055be:	d134      	bne.n	800562a <_svfiprintf_r+0x186>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	9203      	str	r2, [sp, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfb8      	it	lt
 80055cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80055d0:	3402      	adds	r4, #2
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800569c <_svfiprintf_r+0x1f8>
 80055d8:	7821      	ldrb	r1, [r4, #0]
 80055da:	2203      	movs	r2, #3
 80055dc:	4650      	mov	r0, sl
 80055de:	f7fa fe0f 	bl	8000200 <memchr>
 80055e2:	b138      	cbz	r0, 80055f4 <_svfiprintf_r+0x150>
 80055e4:	9b04      	ldr	r3, [sp, #16]
 80055e6:	eba0 000a 	sub.w	r0, r0, sl
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	4082      	lsls	r2, r0
 80055ee:	4313      	orrs	r3, r2
 80055f0:	3401      	adds	r4, #1
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f8:	4825      	ldr	r0, [pc, #148]	; (8005690 <_svfiprintf_r+0x1ec>)
 80055fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055fe:	2206      	movs	r2, #6
 8005600:	f7fa fdfe 	bl	8000200 <memchr>
 8005604:	2800      	cmp	r0, #0
 8005606:	d038      	beq.n	800567a <_svfiprintf_r+0x1d6>
 8005608:	4b22      	ldr	r3, [pc, #136]	; (8005694 <_svfiprintf_r+0x1f0>)
 800560a:	bb1b      	cbnz	r3, 8005654 <_svfiprintf_r+0x1b0>
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	3307      	adds	r3, #7
 8005610:	f023 0307 	bic.w	r3, r3, #7
 8005614:	3308      	adds	r3, #8
 8005616:	9303      	str	r3, [sp, #12]
 8005618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561a:	4433      	add	r3, r6
 800561c:	9309      	str	r3, [sp, #36]	; 0x24
 800561e:	e768      	b.n	80054f2 <_svfiprintf_r+0x4e>
 8005620:	fb0c 3202 	mla	r2, ip, r2, r3
 8005624:	460c      	mov	r4, r1
 8005626:	2001      	movs	r0, #1
 8005628:	e7a6      	b.n	8005578 <_svfiprintf_r+0xd4>
 800562a:	2300      	movs	r3, #0
 800562c:	3401      	adds	r4, #1
 800562e:	9305      	str	r3, [sp, #20]
 8005630:	4619      	mov	r1, r3
 8005632:	f04f 0c0a 	mov.w	ip, #10
 8005636:	4620      	mov	r0, r4
 8005638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800563c:	3a30      	subs	r2, #48	; 0x30
 800563e:	2a09      	cmp	r2, #9
 8005640:	d903      	bls.n	800564a <_svfiprintf_r+0x1a6>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0c6      	beq.n	80055d4 <_svfiprintf_r+0x130>
 8005646:	9105      	str	r1, [sp, #20]
 8005648:	e7c4      	b.n	80055d4 <_svfiprintf_r+0x130>
 800564a:	fb0c 2101 	mla	r1, ip, r1, r2
 800564e:	4604      	mov	r4, r0
 8005650:	2301      	movs	r3, #1
 8005652:	e7f0      	b.n	8005636 <_svfiprintf_r+0x192>
 8005654:	ab03      	add	r3, sp, #12
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	462a      	mov	r2, r5
 800565a:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <_svfiprintf_r+0x1f4>)
 800565c:	a904      	add	r1, sp, #16
 800565e:	4638      	mov	r0, r7
 8005660:	f3af 8000 	nop.w
 8005664:	1c42      	adds	r2, r0, #1
 8005666:	4606      	mov	r6, r0
 8005668:	d1d6      	bne.n	8005618 <_svfiprintf_r+0x174>
 800566a:	89ab      	ldrh	r3, [r5, #12]
 800566c:	065b      	lsls	r3, r3, #25
 800566e:	f53f af2d 	bmi.w	80054cc <_svfiprintf_r+0x28>
 8005672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005674:	b01d      	add	sp, #116	; 0x74
 8005676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567a:	ab03      	add	r3, sp, #12
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	462a      	mov	r2, r5
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <_svfiprintf_r+0x1f4>)
 8005682:	a904      	add	r1, sp, #16
 8005684:	4638      	mov	r0, r7
 8005686:	f000 f879 	bl	800577c <_printf_i>
 800568a:	e7eb      	b.n	8005664 <_svfiprintf_r+0x1c0>
 800568c:	08053234 	.word	0x08053234
 8005690:	0805323e 	.word	0x0805323e
 8005694:	00000000 	.word	0x00000000
 8005698:	080053f1 	.word	0x080053f1
 800569c:	0805323a 	.word	0x0805323a

080056a0 <_printf_common>:
 80056a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	4616      	mov	r6, r2
 80056a6:	4699      	mov	r9, r3
 80056a8:	688a      	ldr	r2, [r1, #8]
 80056aa:	690b      	ldr	r3, [r1, #16]
 80056ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056b0:	4293      	cmp	r3, r2
 80056b2:	bfb8      	it	lt
 80056b4:	4613      	movlt	r3, r2
 80056b6:	6033      	str	r3, [r6, #0]
 80056b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056bc:	4607      	mov	r7, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	b10a      	cbz	r2, 80056c6 <_printf_common+0x26>
 80056c2:	3301      	adds	r3, #1
 80056c4:	6033      	str	r3, [r6, #0]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	0699      	lsls	r1, r3, #26
 80056ca:	bf42      	ittt	mi
 80056cc:	6833      	ldrmi	r3, [r6, #0]
 80056ce:	3302      	addmi	r3, #2
 80056d0:	6033      	strmi	r3, [r6, #0]
 80056d2:	6825      	ldr	r5, [r4, #0]
 80056d4:	f015 0506 	ands.w	r5, r5, #6
 80056d8:	d106      	bne.n	80056e8 <_printf_common+0x48>
 80056da:	f104 0a19 	add.w	sl, r4, #25
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	6832      	ldr	r2, [r6, #0]
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	42ab      	cmp	r3, r5
 80056e6:	dc26      	bgt.n	8005736 <_printf_common+0x96>
 80056e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056ec:	1e13      	subs	r3, r2, #0
 80056ee:	6822      	ldr	r2, [r4, #0]
 80056f0:	bf18      	it	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	0692      	lsls	r2, r2, #26
 80056f6:	d42b      	bmi.n	8005750 <_printf_common+0xb0>
 80056f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056fc:	4649      	mov	r1, r9
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	3001      	adds	r0, #1
 8005704:	d01e      	beq.n	8005744 <_printf_common+0xa4>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	f003 0306 	and.w	r3, r3, #6
 800570e:	2b04      	cmp	r3, #4
 8005710:	bf02      	ittt	eq
 8005712:	68e5      	ldreq	r5, [r4, #12]
 8005714:	6833      	ldreq	r3, [r6, #0]
 8005716:	1aed      	subeq	r5, r5, r3
 8005718:	68a3      	ldr	r3, [r4, #8]
 800571a:	bf0c      	ite	eq
 800571c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005720:	2500      	movne	r5, #0
 8005722:	4293      	cmp	r3, r2
 8005724:	bfc4      	itt	gt
 8005726:	1a9b      	subgt	r3, r3, r2
 8005728:	18ed      	addgt	r5, r5, r3
 800572a:	2600      	movs	r6, #0
 800572c:	341a      	adds	r4, #26
 800572e:	42b5      	cmp	r5, r6
 8005730:	d11a      	bne.n	8005768 <_printf_common+0xc8>
 8005732:	2000      	movs	r0, #0
 8005734:	e008      	b.n	8005748 <_printf_common+0xa8>
 8005736:	2301      	movs	r3, #1
 8005738:	4652      	mov	r2, sl
 800573a:	4649      	mov	r1, r9
 800573c:	4638      	mov	r0, r7
 800573e:	47c0      	blx	r8
 8005740:	3001      	adds	r0, #1
 8005742:	d103      	bne.n	800574c <_printf_common+0xac>
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574c:	3501      	adds	r5, #1
 800574e:	e7c6      	b.n	80056de <_printf_common+0x3e>
 8005750:	18e1      	adds	r1, r4, r3
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	2030      	movs	r0, #48	; 0x30
 8005756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800575a:	4422      	add	r2, r4
 800575c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005764:	3302      	adds	r3, #2
 8005766:	e7c7      	b.n	80056f8 <_printf_common+0x58>
 8005768:	2301      	movs	r3, #1
 800576a:	4622      	mov	r2, r4
 800576c:	4649      	mov	r1, r9
 800576e:	4638      	mov	r0, r7
 8005770:	47c0      	blx	r8
 8005772:	3001      	adds	r0, #1
 8005774:	d0e6      	beq.n	8005744 <_printf_common+0xa4>
 8005776:	3601      	adds	r6, #1
 8005778:	e7d9      	b.n	800572e <_printf_common+0x8e>
	...

0800577c <_printf_i>:
 800577c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	7e0f      	ldrb	r7, [r1, #24]
 8005782:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005784:	2f78      	cmp	r7, #120	; 0x78
 8005786:	4691      	mov	r9, r2
 8005788:	4680      	mov	r8, r0
 800578a:	460c      	mov	r4, r1
 800578c:	469a      	mov	sl, r3
 800578e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005792:	d807      	bhi.n	80057a4 <_printf_i+0x28>
 8005794:	2f62      	cmp	r7, #98	; 0x62
 8005796:	d80a      	bhi.n	80057ae <_printf_i+0x32>
 8005798:	2f00      	cmp	r7, #0
 800579a:	f000 80d4 	beq.w	8005946 <_printf_i+0x1ca>
 800579e:	2f58      	cmp	r7, #88	; 0x58
 80057a0:	f000 80c0 	beq.w	8005924 <_printf_i+0x1a8>
 80057a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057ac:	e03a      	b.n	8005824 <_printf_i+0xa8>
 80057ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057b2:	2b15      	cmp	r3, #21
 80057b4:	d8f6      	bhi.n	80057a4 <_printf_i+0x28>
 80057b6:	a101      	add	r1, pc, #4	; (adr r1, 80057bc <_printf_i+0x40>)
 80057b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057bc:	08005815 	.word	0x08005815
 80057c0:	08005829 	.word	0x08005829
 80057c4:	080057a5 	.word	0x080057a5
 80057c8:	080057a5 	.word	0x080057a5
 80057cc:	080057a5 	.word	0x080057a5
 80057d0:	080057a5 	.word	0x080057a5
 80057d4:	08005829 	.word	0x08005829
 80057d8:	080057a5 	.word	0x080057a5
 80057dc:	080057a5 	.word	0x080057a5
 80057e0:	080057a5 	.word	0x080057a5
 80057e4:	080057a5 	.word	0x080057a5
 80057e8:	0800592d 	.word	0x0800592d
 80057ec:	08005855 	.word	0x08005855
 80057f0:	080058e7 	.word	0x080058e7
 80057f4:	080057a5 	.word	0x080057a5
 80057f8:	080057a5 	.word	0x080057a5
 80057fc:	0800594f 	.word	0x0800594f
 8005800:	080057a5 	.word	0x080057a5
 8005804:	08005855 	.word	0x08005855
 8005808:	080057a5 	.word	0x080057a5
 800580c:	080057a5 	.word	0x080057a5
 8005810:	080058ef 	.word	0x080058ef
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	1d1a      	adds	r2, r3, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	602a      	str	r2, [r5, #0]
 800581c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005824:	2301      	movs	r3, #1
 8005826:	e09f      	b.n	8005968 <_printf_i+0x1ec>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	0607      	lsls	r7, r0, #24
 800582e:	f103 0104 	add.w	r1, r3, #4
 8005832:	6029      	str	r1, [r5, #0]
 8005834:	d501      	bpl.n	800583a <_printf_i+0xbe>
 8005836:	681e      	ldr	r6, [r3, #0]
 8005838:	e003      	b.n	8005842 <_printf_i+0xc6>
 800583a:	0646      	lsls	r6, r0, #25
 800583c:	d5fb      	bpl.n	8005836 <_printf_i+0xba>
 800583e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005842:	2e00      	cmp	r6, #0
 8005844:	da03      	bge.n	800584e <_printf_i+0xd2>
 8005846:	232d      	movs	r3, #45	; 0x2d
 8005848:	4276      	negs	r6, r6
 800584a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800584e:	485a      	ldr	r0, [pc, #360]	; (80059b8 <_printf_i+0x23c>)
 8005850:	230a      	movs	r3, #10
 8005852:	e012      	b.n	800587a <_printf_i+0xfe>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	1d19      	adds	r1, r3, #4
 800585a:	6029      	str	r1, [r5, #0]
 800585c:	0605      	lsls	r5, r0, #24
 800585e:	d501      	bpl.n	8005864 <_printf_i+0xe8>
 8005860:	681e      	ldr	r6, [r3, #0]
 8005862:	e002      	b.n	800586a <_printf_i+0xee>
 8005864:	0641      	lsls	r1, r0, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0xe4>
 8005868:	881e      	ldrh	r6, [r3, #0]
 800586a:	4853      	ldr	r0, [pc, #332]	; (80059b8 <_printf_i+0x23c>)
 800586c:	2f6f      	cmp	r7, #111	; 0x6f
 800586e:	bf0c      	ite	eq
 8005870:	2308      	moveq	r3, #8
 8005872:	230a      	movne	r3, #10
 8005874:	2100      	movs	r1, #0
 8005876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800587a:	6865      	ldr	r5, [r4, #4]
 800587c:	60a5      	str	r5, [r4, #8]
 800587e:	2d00      	cmp	r5, #0
 8005880:	bfa2      	ittt	ge
 8005882:	6821      	ldrge	r1, [r4, #0]
 8005884:	f021 0104 	bicge.w	r1, r1, #4
 8005888:	6021      	strge	r1, [r4, #0]
 800588a:	b90e      	cbnz	r6, 8005890 <_printf_i+0x114>
 800588c:	2d00      	cmp	r5, #0
 800588e:	d04b      	beq.n	8005928 <_printf_i+0x1ac>
 8005890:	4615      	mov	r5, r2
 8005892:	fbb6 f1f3 	udiv	r1, r6, r3
 8005896:	fb03 6711 	mls	r7, r3, r1, r6
 800589a:	5dc7      	ldrb	r7, [r0, r7]
 800589c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058a0:	4637      	mov	r7, r6
 80058a2:	42bb      	cmp	r3, r7
 80058a4:	460e      	mov	r6, r1
 80058a6:	d9f4      	bls.n	8005892 <_printf_i+0x116>
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d10b      	bne.n	80058c4 <_printf_i+0x148>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	07de      	lsls	r6, r3, #31
 80058b0:	d508      	bpl.n	80058c4 <_printf_i+0x148>
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	6861      	ldr	r1, [r4, #4]
 80058b6:	4299      	cmp	r1, r3
 80058b8:	bfde      	ittt	le
 80058ba:	2330      	movle	r3, #48	; 0x30
 80058bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c4:	1b52      	subs	r2, r2, r5
 80058c6:	6122      	str	r2, [r4, #16]
 80058c8:	f8cd a000 	str.w	sl, [sp]
 80058cc:	464b      	mov	r3, r9
 80058ce:	aa03      	add	r2, sp, #12
 80058d0:	4621      	mov	r1, r4
 80058d2:	4640      	mov	r0, r8
 80058d4:	f7ff fee4 	bl	80056a0 <_printf_common>
 80058d8:	3001      	adds	r0, #1
 80058da:	d14a      	bne.n	8005972 <_printf_i+0x1f6>
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	b004      	add	sp, #16
 80058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	f043 0320 	orr.w	r3, r3, #32
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	4833      	ldr	r0, [pc, #204]	; (80059bc <_printf_i+0x240>)
 80058f0:	2778      	movs	r7, #120	; 0x78
 80058f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	6829      	ldr	r1, [r5, #0]
 80058fa:	061f      	lsls	r7, r3, #24
 80058fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005900:	d402      	bmi.n	8005908 <_printf_i+0x18c>
 8005902:	065f      	lsls	r7, r3, #25
 8005904:	bf48      	it	mi
 8005906:	b2b6      	uxthmi	r6, r6
 8005908:	07df      	lsls	r7, r3, #31
 800590a:	bf48      	it	mi
 800590c:	f043 0320 	orrmi.w	r3, r3, #32
 8005910:	6029      	str	r1, [r5, #0]
 8005912:	bf48      	it	mi
 8005914:	6023      	strmi	r3, [r4, #0]
 8005916:	b91e      	cbnz	r6, 8005920 <_printf_i+0x1a4>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	f023 0320 	bic.w	r3, r3, #32
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	2310      	movs	r3, #16
 8005922:	e7a7      	b.n	8005874 <_printf_i+0xf8>
 8005924:	4824      	ldr	r0, [pc, #144]	; (80059b8 <_printf_i+0x23c>)
 8005926:	e7e4      	b.n	80058f2 <_printf_i+0x176>
 8005928:	4615      	mov	r5, r2
 800592a:	e7bd      	b.n	80058a8 <_printf_i+0x12c>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	6826      	ldr	r6, [r4, #0]
 8005930:	6961      	ldr	r1, [r4, #20]
 8005932:	1d18      	adds	r0, r3, #4
 8005934:	6028      	str	r0, [r5, #0]
 8005936:	0635      	lsls	r5, r6, #24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	d501      	bpl.n	8005940 <_printf_i+0x1c4>
 800593c:	6019      	str	r1, [r3, #0]
 800593e:	e002      	b.n	8005946 <_printf_i+0x1ca>
 8005940:	0670      	lsls	r0, r6, #25
 8005942:	d5fb      	bpl.n	800593c <_printf_i+0x1c0>
 8005944:	8019      	strh	r1, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	4615      	mov	r5, r2
 800594c:	e7bc      	b.n	80058c8 <_printf_i+0x14c>
 800594e:	682b      	ldr	r3, [r5, #0]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	602a      	str	r2, [r5, #0]
 8005954:	681d      	ldr	r5, [r3, #0]
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	2100      	movs	r1, #0
 800595a:	4628      	mov	r0, r5
 800595c:	f7fa fc50 	bl	8000200 <memchr>
 8005960:	b108      	cbz	r0, 8005966 <_printf_i+0x1ea>
 8005962:	1b40      	subs	r0, r0, r5
 8005964:	6060      	str	r0, [r4, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	2300      	movs	r3, #0
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	e7aa      	b.n	80058c8 <_printf_i+0x14c>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	462a      	mov	r2, r5
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	47d0      	blx	sl
 800597c:	3001      	adds	r0, #1
 800597e:	d0ad      	beq.n	80058dc <_printf_i+0x160>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	079b      	lsls	r3, r3, #30
 8005984:	d413      	bmi.n	80059ae <_printf_i+0x232>
 8005986:	68e0      	ldr	r0, [r4, #12]
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	4298      	cmp	r0, r3
 800598c:	bfb8      	it	lt
 800598e:	4618      	movlt	r0, r3
 8005990:	e7a6      	b.n	80058e0 <_printf_i+0x164>
 8005992:	2301      	movs	r3, #1
 8005994:	4632      	mov	r2, r6
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d09d      	beq.n	80058dc <_printf_i+0x160>
 80059a0:	3501      	adds	r5, #1
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	9903      	ldr	r1, [sp, #12]
 80059a6:	1a5b      	subs	r3, r3, r1
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dcf2      	bgt.n	8005992 <_printf_i+0x216>
 80059ac:	e7eb      	b.n	8005986 <_printf_i+0x20a>
 80059ae:	2500      	movs	r5, #0
 80059b0:	f104 0619 	add.w	r6, r4, #25
 80059b4:	e7f5      	b.n	80059a2 <_printf_i+0x226>
 80059b6:	bf00      	nop
 80059b8:	08053245 	.word	0x08053245
 80059bc:	08053256 	.word	0x08053256

080059c0 <memmove>:
 80059c0:	4288      	cmp	r0, r1
 80059c2:	b510      	push	{r4, lr}
 80059c4:	eb01 0402 	add.w	r4, r1, r2
 80059c8:	d902      	bls.n	80059d0 <memmove+0x10>
 80059ca:	4284      	cmp	r4, r0
 80059cc:	4623      	mov	r3, r4
 80059ce:	d807      	bhi.n	80059e0 <memmove+0x20>
 80059d0:	1e43      	subs	r3, r0, #1
 80059d2:	42a1      	cmp	r1, r4
 80059d4:	d008      	beq.n	80059e8 <memmove+0x28>
 80059d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059de:	e7f8      	b.n	80059d2 <memmove+0x12>
 80059e0:	4402      	add	r2, r0
 80059e2:	4601      	mov	r1, r0
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d100      	bne.n	80059ea <memmove+0x2a>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f2:	e7f7      	b.n	80059e4 <memmove+0x24>

080059f4 <_sbrk_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d06      	ldr	r5, [pc, #24]	; (8005a10 <_sbrk_r+0x1c>)
 80059f8:	2300      	movs	r3, #0
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7ff fb7c 	bl	80050fc <_sbrk>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_sbrk_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_sbrk_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	200004d8 	.word	0x200004d8

08005a14 <memcpy>:
 8005a14:	440a      	add	r2, r1
 8005a16:	4291      	cmp	r1, r2
 8005a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1c:	d100      	bne.n	8005a20 <memcpy+0xc>
 8005a1e:	4770      	bx	lr
 8005a20:	b510      	push	{r4, lr}
 8005a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2a:	4291      	cmp	r1, r2
 8005a2c:	d1f9      	bne.n	8005a22 <memcpy+0xe>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <_realloc_r>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	4680      	mov	r8, r0
 8005a36:	4614      	mov	r4, r2
 8005a38:	460e      	mov	r6, r1
 8005a3a:	b921      	cbnz	r1, 8005a46 <_realloc_r+0x16>
 8005a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a40:	4611      	mov	r1, r2
 8005a42:	f7ff bc49 	b.w	80052d8 <_malloc_r>
 8005a46:	b92a      	cbnz	r2, 8005a54 <_realloc_r+0x24>
 8005a48:	f7ff fbda 	bl	8005200 <_free_r>
 8005a4c:	4625      	mov	r5, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	f000 f81b 	bl	8005a8e <_malloc_usable_size_r>
 8005a58:	4284      	cmp	r4, r0
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	d802      	bhi.n	8005a64 <_realloc_r+0x34>
 8005a5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a62:	d812      	bhi.n	8005a8a <_realloc_r+0x5a>
 8005a64:	4621      	mov	r1, r4
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff fc36 	bl	80052d8 <_malloc_r>
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0ed      	beq.n	8005a4e <_realloc_r+0x1e>
 8005a72:	42bc      	cmp	r4, r7
 8005a74:	4622      	mov	r2, r4
 8005a76:	4631      	mov	r1, r6
 8005a78:	bf28      	it	cs
 8005a7a:	463a      	movcs	r2, r7
 8005a7c:	f7ff ffca 	bl	8005a14 <memcpy>
 8005a80:	4631      	mov	r1, r6
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fbbc 	bl	8005200 <_free_r>
 8005a88:	e7e1      	b.n	8005a4e <_realloc_r+0x1e>
 8005a8a:	4635      	mov	r5, r6
 8005a8c:	e7df      	b.n	8005a4e <_realloc_r+0x1e>

08005a8e <_malloc_usable_size_r>:
 8005a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a92:	1f18      	subs	r0, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bfbc      	itt	lt
 8005a98:	580b      	ldrlt	r3, [r1, r0]
 8005a9a:	18c0      	addlt	r0, r0, r3
 8005a9c:	4770      	bx	lr
	...

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
